<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\U_PSDR_VSL_CT6K_EMS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\U_PSDR_VSL_CT6K_EMS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Oct 24 17:33:56 2023
<BR><P>
<H3>Maximum Stack Usage =       2600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MainProcess &rArr; FaultManagement_Handler &rArr; FaultRunning &rArr; EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[99]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ADC1_COMP_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2b]">CEC_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[18]">DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler</a> from mcu.o(i.DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from mcu.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_3_IRQHandler</a> from mcu.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[12]">EXTI0_1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[13]">EXTI2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[14]">EXTI4_15_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from mcu.o(i.HardFault_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[24]">I2C1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[25]">I2C2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[e]">PVD_VDDIO2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[11]">RCC_CRS_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[f]">RTC_TAMP_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[26]">SPI1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[27]">SPI2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from mcu.o(i.SysTick_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from system_stm32g0xx.o(i.SystemInit) referenced from startup_stm32g0b1xx.o(.text)
 <LI><a href="#[20]">TIM14_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[21]">TIM15_IRQHandler</a> from mcu.o(i.TIM15_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[22]">TIM16_FDCAN_IT0_IRQHandler</a> from mcu.o(i.TIM16_FDCAN_IT0_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[23]">TIM17_FDCAN_IT1_IRQHandler</a> from mcu.o(i.TIM17_FDCAN_IT1_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1a]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1b]">TIM1_CC_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1c]">TIM2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1d]">TIM3_TIM4_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1e]">TIM6_DAC_LPTIM1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1f]">TIM7_LPTIM2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[28]">USART1_IRQHandler</a> from mcu.o(i.USART1_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[29]">USART2_LPUART2_IRQHandler</a> from mcu.o(i.USART2_LPUART2_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2a]">USART3_4_5_6_LPUART1_IRQHandler</a> from mcu.o(i.USART3_4_5_6_LPUART1_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[15]">USB_UCPD1_2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[38]">__main</a> from __main.o(!!!main) referenced from startup_stm32g0b1xx.o(.text)
 <LI><a href="#[33]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[34]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[31]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[36]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[37]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[35]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[30]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[2e]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[32]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[671]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[672]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[673]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[60]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[3f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[41]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[43]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[4d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[674]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[675]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[45]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[676]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[677]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[678]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[679]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[47]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[67a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[67b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[48]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[67c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[67d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[67e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[67f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[680]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[681]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[682]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[683]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[684]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[685]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[686]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[687]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[688]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[52]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[689]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[68a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[68b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[68c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[68d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[68e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[68f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[690]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[691]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MainProcess &rArr; FaultManagement_Handler &rArr; FaultRunning &rArr; EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[692]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[51]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[693]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[53]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSerialNumberErrorProof
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[694]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM3_TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM6_DAC_LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM7_LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_UCPD1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[695]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[696]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigParaDaultTable_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryParaDaultTable_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_English
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_English
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_English
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_English
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_English
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_English
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_English
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_English
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_English
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_English
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_English
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_English
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_English
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_English
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_English
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_English
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_English
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_English
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_English
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_English
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_English
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_English
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_English
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_English
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData_English
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_English
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_English
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_English
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_English
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_English
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_English
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_English
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_English
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_English
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_English
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_English
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_English
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_English
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_English
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTCTimetoDisplayTime
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Chinese
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Chinese
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Chinese
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Chinese
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Chinese
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Chinese
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Chinese
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Chinese
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Chinese
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Chinese
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Chinese
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Chinese
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Chinese
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Chinese
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Chinese
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Chinese
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Chinese
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Chinese
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Chinese
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Chinese
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Chinese
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Chinese
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Chinese
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Chinese
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Chinese
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData_Chinese
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Chinese
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Chinese
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Chinese
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Chinese
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Chinese
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Chinese
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Chinese
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Chinese
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Chinese
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Chinese
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Chinese
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Chinese
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Chinese
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Chinese
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Chinese
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_English
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_English
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_English
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_English
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_English
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_English
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_English
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_English
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_English
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_English
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_English
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_English
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_English
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_English
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_English
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_English
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_English
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Spanish
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Polish
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Italian
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_German
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_French
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_English
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Dutch
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Czech
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_English
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_English
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_English
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_English
</UL>

<P><STRONG><a name="[58]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[59]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[57]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[40]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[42]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[697]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[61]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemSerialData
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayTimetoRTCTime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[bc]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_SampleAdjData_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_HardwareVersion_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_EESerialNumber_Write
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ProtectInfo_Write
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PVInfo_Write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_OperateRecord_Write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_FaultData_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ElecPriceData_Write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Get_Time
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StrategyData_Write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
</UL>

<P><STRONG><a name="[66d]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Chinese
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_English
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_SampleAdjData_Read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_HardwareVersion_Read
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_EESerialNumber_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSCan_SendPacket
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCan_SendPacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCan_ReceivePacket
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCodeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustParamInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPcs10HEnergyStrategy
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalParamInfo
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcs10HEmsParam
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPV2Information
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPV1Information
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvInformation
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySystemFault
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayInvFault
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDCDCFault
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCDCInformation
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPV2Fault
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPV1Fault
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_SampleAdjData_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_HardwareVersion_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_EESerialNumber_Write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakBatteryProtect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBMSProtectParam
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ProtectInfo_Write
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PVInfo_Write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_OperateRecord_Write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_OperateRecord_Read
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_FaultData_Write
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_FaultData_Read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ElecPriceData_Write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_ReceivePacket
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSCanFault
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSFault
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsPylonMutualInfo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsPylonAnalogInfo
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertHistoryFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Can_msg
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayTimetoRTCTime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayPasswordtToFlash
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPasswordFromFlash
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Para
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceTime
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceTime
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPcs10HGridStandardInfo
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertOperationRecordQueue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySoftwareVersion
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StrategyData_Write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StrategyData_Read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StatisticsData_Read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ProtectInfo_Read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_Password_Read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PVInfo_Read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PCSSerial_Read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ElecPriceData_Read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_CTRadio_Read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>

<P><STRONG><a name="[698]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[699]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePVAverageFilterValue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateOutputAverageFilterValue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLoadAverageFilterValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateInputAverageFilterValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDisChargeAverageFilterValue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateChargeAverageFilterValue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAverageFilterValue
</UL>

<P><STRONG><a name="[69a]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[6a]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[69]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2BmsCan_Receive_Service
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Statistics_Service_InitVar
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Service_InitVar
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_InitVar
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Service_InitVar
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlEnergyRunning
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemStatisticalToCloudData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVInfoToCloudData
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadInfoToCloudData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvGenInfoToCloudData
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGirdParmInfoToCloudData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatInfoToCloudData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_English
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_English
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_English
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_English
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_English
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_English
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_English
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_English
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_English
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_English
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_English
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_English
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_English
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_English
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_English
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_English
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_English
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_English
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_English
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_English
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_English
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_English
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_English
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData_English
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_English
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_English
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_English
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_English
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_English
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_English
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_English
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_English
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_English
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_English
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_English
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_English
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_English
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_English
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_SystemStatistical
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayFixFlickerStartPosAndEndPosInit_English
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayFixFlickerStartPosAndEndPosInit_Chinese
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Chinese
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Chinese
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Chinese
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Chinese
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Chinese
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Chinese
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Chinese
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Chinese
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Chinese
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Chinese
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Chinese
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Chinese
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Chinese
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Chinese
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Chinese
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Chinese
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Chinese
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Chinese
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Chinese
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Chinese
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Chinese
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Chinese
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Chinese
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Chinese
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Chinese
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Chinese
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Chinese
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Chinese
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Chinese
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Chinese
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Chinese
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Chinese
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Chinese
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Chinese
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Chinese
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_OperationRecordData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_HistoryFaultData
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_English
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_English
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_English
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_English
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_English
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_English
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_English
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_English
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_English
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_English
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_English
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_English
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Spanish
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Polish
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Italian
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_German
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_French
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_English
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Dutch
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Czech
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_English
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_English
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_English
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_English
</UL>

<P><STRONG><a name="[6e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_Initial
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustParamInit
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Statistics_Service_InitVar
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtectParas
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCoreData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_SendPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_SendPacket
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVInfoToCloudData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvGenInfoToCloudData
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGirdParmInfoToCloudData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatInfoToCloudData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndicationStatus
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSFaultBitTransformFaultCode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSAlarmBitTransformFaultCode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVFaultBitTransformFaultCode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvFaultBitTransformFaultCode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertHistoryFaultQueue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenFaultBitTransformFaultCode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSFaultBitTransformFaultCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDCFaultBitTransformFaultCode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSFaultBitTransformFaultCode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCanFaultBitTransformFaultCode
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyRegulationInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayFixFlickerStartPosAndEndPosInit_Chinese
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR_Service_InitVar
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertOperationRecordQueue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>

<P><STRONG><a name="[69b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[6d]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperateNameByOperateCode_Chinese
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperatObjeNameByOperateObjCode_Chinese
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode_Chinese
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperateNameByOperateCode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperatObjeNameByOperateObjCode
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode
</UL>

<P><STRONG><a name="[1a4]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemPasswordVerify
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Meter_Retransmit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakBatteryProtect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemStatisticalToCloudData
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSFaultBitTransformFaultCode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVFaultBitTransformFaultCode
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_English
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_KindPower
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Chinese
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>

<P><STRONG><a name="[69c]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakBatteryProtect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemStatisticalToCloudData
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearZeroWithKeyNodes
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeGridData
</UL>

<P><STRONG><a name="[69d]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__aeabi_uread8</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uread8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uread8
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvFaultBitTransformFaultCode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>

<P><STRONG><a name="[69e]"></a>__rt_uread8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uread8.o(.text), UNUSED)

<P><STRONG><a name="[69f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Meter_Retransmit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_OCV
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePVAverageFilterValue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateOutputAverageFilterValue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLoadAverageFilterValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateInputAverageFilterValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDisChargeAverageFilterValue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateChargeAverageFilterValue
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteSector
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_SectorToPage
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadSector
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeGridData
</UL>

<P><STRONG><a name="[6a0]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Meter_Retransmit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePlyonBMSData
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Float_IEEE745
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Floating_Charge
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_DisCharge
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_ConstantVoltage_Charge
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_ConstantCurrent_Charge
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePlyonBMSCanData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeLeadBatteryData
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConvertCloudInputTime
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAverageFilterValue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Byte_to_BCD
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Can_msg
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushCanData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeGridData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[6a1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6a2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6a3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
</UL>

<P><STRONG><a name="[6a4]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
</UL>

<P><STRONG><a name="[70]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[6f]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
</UL>

<P><STRONG><a name="[6a5]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
</UL>

<P><STRONG><a name="[6a6]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_English
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Chinese
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
</UL>

<P><STRONG><a name="[6a7]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
</UL>

<P><STRONG><a name="[75]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[74]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[2c6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[6a8]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[6a9]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
</UL>

<P><STRONG><a name="[6aa]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
</UL>

<P><STRONG><a name="[6ab]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6ac]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[6ad]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[7a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[5d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6ae]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[56]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[85]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[44]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[88]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[63]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[5c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8b]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[8e]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[6af]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6b0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[46]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[80]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[30]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7c]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7d]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[94]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7e]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[96]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8c]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[8d]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[8f]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[4b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[90]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[35]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[50]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[97]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[54]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[36]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[37]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[6b1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6b2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[6b3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6b4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[6b5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[6b6]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>ADC_Disable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDisableOngoing
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[ab]"></a>ADC_Driver_Initial</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_driver.o(i.ADC_Driver_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC_Driver_Initial &rArr; ADC_Driver_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_SetValue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_GetValue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[af]"></a>ADC_Enable</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[b6]"></a>ArrayFixFlickerStartPosAndEndPosInit_Chinese</STRONG> (Thumb, 1820 bytes, Stack size 8 bytes, lcd_service.o(i.ArrayFixFlickerStartPosAndEndPosInit_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArrayFixFlickerStartPosAndEndPosInit_Chinese
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[b7]"></a>ArrayFixFlickerStartPosAndEndPosInit_English</STRONG> (Thumb, 2326 bytes, Stack size 8 bytes, lcd_service.o(i.ArrayFixFlickerStartPosAndEndPosInit_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArrayFixFlickerStartPosAndEndPosInit_English
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[341]"></a>BASE_TIMER_HANDLER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timetask.o(i.BASE_TIMER_HANDLER))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>BL5372_Device_BCD_to_Byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bl5372_device.o(i.BL5372_Device_BCD_to_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Get_Time
</UL>

<P><STRONG><a name="[b8]"></a>BL5372_Device_Byte_to_BCD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_Byte_to_BCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BL5372_Device_Byte_to_BCD &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Set_Time
</UL>

<P><STRONG><a name="[b9]"></a>BL5372_Device_Get_Time</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bl5372_device.o(i.BL5372_Device_Get_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL5372_Device_Get_Time &rArr; BL5372_Device_Read_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCalendar
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_BCD_to_Byte
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceTime
</UL>

<P><STRONG><a name="[be]"></a>BL5372_Device_I2C_ACK</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_I2C_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BL5372_Device_I2C_ACK &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
</UL>

<P><STRONG><a name="[c2]"></a>BL5372_Device_I2C_NACK</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_I2C_NACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BL5372_Device_I2C_NACK &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
</UL>

<P><STRONG><a name="[c3]"></a>BL5372_Device_I2C_ReadBit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_I2C_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BL5372_Device_I2C_ReadBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_ReadInputPin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Time
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadByte
</UL>

<P><STRONG><a name="[c5]"></a>BL5372_Device_I2C_ReadByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BL5372_Device_I2C_ReadByte &rArr; BL5372_Device_I2C_ReadBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
</UL>

<P><STRONG><a name="[c6]"></a>BL5372_Device_I2C_Start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BL5372_Device_I2C_Start &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Time
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
</UL>

<P><STRONG><a name="[c7]"></a>BL5372_Device_I2C_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BL5372_Device_I2C_Stop &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Time
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
</UL>

<P><STRONG><a name="[c8]"></a>BL5372_Device_I2C_WriteBit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bl5372_device.o(i.BL5372_Device_I2C_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteByte
</UL>

<P><STRONG><a name="[c9]"></a>BL5372_Device_I2C_WriteByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Time
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
</UL>

<P><STRONG><a name="[ca]"></a>BL5372_Device_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BL5372_Device_Init &rArr; BL5372_Device_Write_Data &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[257]"></a>BL5372_Device_InitVar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bl5372_device.o(i.BL5372_Device_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[cb]"></a>BL5372_Device_Read_Data</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BL5372_Device_Read_Data &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_NACK
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Init
</UL>

<P><STRONG><a name="[ba]"></a>BL5372_Device_Read_Time</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_Read_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BL5372_Device_Read_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_NACK
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Get_Time
</UL>

<P><STRONG><a name="[cd]"></a>BL5372_Device_Set_Time</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bl5372_device.o(i.BL5372_Device_Set_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCalendar
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Write_Time
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Byte_to_BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceTime
</UL>

<P><STRONG><a name="[cc]"></a>BL5372_Device_Write_Data</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BL5372_Device_Write_Data &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Init
</UL>

<P><STRONG><a name="[ce]"></a>BL5372_Device_Write_Time</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, bl5372_device.o(i.BL5372_Device_Write_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Set_Time
</UL>

<P><STRONG><a name="[d2]"></a>BMSCan_ReceivePacket</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, canbus_bms_comdata.o(i.BMSCan_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BMSCan_ReceivePacket &rArr; can1_ReceivePacket &rArr; read_Can_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_ReceivePacket
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2BmsCan_Receive_Service
</UL>

<P><STRONG><a name="[d4]"></a>BMSCan_SendPacket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canbus_bms_comdata.o(i.BMSCan_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BMSCan_SendPacket &rArr; can1_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_SendPacket
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2BmsCan_Send_Service
</UL>

<P><STRONG><a name="[d7]"></a>BatteryProtect_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, battery_protect_service.o(i.BatteryProtect_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BatteryProtect_Handler &rArr; BatteryRunning &rArr; LeadBattery_Running &rArr; LeadBattery_SOC_Integral &rArr; CalculateAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryRunning
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[df]"></a>Battery_Service_InitVar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, battery_protect_service.o(i.Battery_Service_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Battery_Service_InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[253]"></a>Buzzer_Service_InitVar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, buzzer_service.o(i.Buzzer_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[e0]"></a>CAN_Driver_Initial</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can_driver.o(i.CAN_Driver_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN_Driver_Initial &rArr; bsp_InitCan2 &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[e3]"></a>CalculateAverageFilterValue</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, battery_protect_service.o(i.CalculateAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CalculateAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
</UL>

<P><STRONG><a name="[306]"></a>CalculateAvgTemp_HCS41A103F8</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ntc_device.o(i.CalculateAvgTemp_HCS41A103F8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculateAvgTemp_HCS41A103F8
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_DRM_ADC_Handler
</UL>

<P><STRONG><a name="[305]"></a>CalculateAvgTemp_SDNT1608</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ntc_device.o(i.CalculateAvgTemp_SDNT1608))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculateAvgTemp_SDNT1608
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_DRM_ADC_Handler
</UL>

<P><STRONG><a name="[e4]"></a>CalculateChargeAverageFilterValue</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, statistics_management_service.o(i.CalculateChargeAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalculateChargeAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[e5]"></a>CalculateDisChargeAverageFilterValue</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, statistics_management_service.o(i.CalculateDisChargeAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalculateDisChargeAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[e6]"></a>CalculateInputAverageFilterValue</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, statistics_management_service.o(i.CalculateInputAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalculateInputAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[e7]"></a>CalculateLoadAverageFilterValue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, statistics_management_service.o(i.CalculateLoadAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalculateLoadAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[e8]"></a>CalculateOutputAverageFilterValue</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, statistics_management_service.o(i.CalculateOutputAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalculateOutputAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[e9]"></a>CalculatePVAverageFilterValue</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, statistics_management_service.o(i.CalculatePVAverageFilterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalculatePVAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[ea]"></a>CheckBmsComDataRange_03H</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, modbus_bms_comdata.o(i.CheckBmsComDataRange_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckBmsComDataRange_03H
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBmsGrowattComDataRange_03H
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Range_Check
</UL>

<P><STRONG><a name="[eb]"></a>CheckBmsGrowattComDataRange_03H</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, modbus_bms_comdata.o(i.CheckBmsGrowattComDataRange_03H))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBmsComDataRange_03H
</UL>

<P><STRONG><a name="[2ea]"></a>CheckEmsCloudComDataRange_03H</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, modbus_cloud_comdata.o(i.CheckEmsCloudComDataRange_03H))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Range_Check
</UL>

<P><STRONG><a name="[2f0]"></a>CheckEmsCloudComDataRange_10H</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, modbus_cloud_comdata.o(i.CheckEmsCloudComDataRange_10H))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Range_Check
</UL>

<P><STRONG><a name="[2e7]"></a>CheckPCSComDataRange_01H</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.CheckPCSComDataRange_01H))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Range_Check
</UL>

<P><STRONG><a name="[2e9]"></a>CheckPCSComDataRange_03H</STRONG> (Thumb, 618 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.CheckPCSComDataRange_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckPCSComDataRange_03H
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Range_Check
</UL>

<P><STRONG><a name="[2ec]"></a>CheckPCSComDataRange_05H</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.CheckPCSComDataRange_05H))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Range_Check
</UL>

<P><STRONG><a name="[2ee]"></a>CheckPCSComDataRange_0FH</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.CheckPCSComDataRange_0FH))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Range_Check
</UL>

<P><STRONG><a name="[ee]"></a>CheckPCSComDataRange_10H</STRONG> (Thumb, 442 bytes, Stack size 4 bytes, modbus_pcs_comdata.o(i.CheckPCSComDataRange_10H))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckPCSComDataRange_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Range_Check
</UL>

<P><STRONG><a name="[f4]"></a>ClearZeroWithKeyNodes</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, statistics_management_service.o(i.ClearZeroWithKeyNodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ClearZeroWithKeyNodes &rArr; Flash_Device_StatisticsData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StatisticsData_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[f7]"></a>Clock_Initial</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, mcu.o(i.Clock_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Clock_Initial &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[11d]"></a>Comm_Module_InitVar</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm_Module_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Comm_Module_InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, mcu.o(i.DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler &rArr; LL_DMA_IsEnabledIT_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_IsEnabledIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mcu.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mcu.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; LL_DMA_IsEnabledIT_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_IsEnabledIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>DMA_Driver_ComPort1_Rx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort1_Rx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort1_Rx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[12c]"></a>DMA_Driver_ComPort1_Tx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort1_Tx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort1_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[12d]"></a>DMA_Driver_ComPort2_Rx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort2_Rx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort2_Rx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[12e]"></a>DMA_Driver_ComPort2_Tx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort2_Tx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort2_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[12f]"></a>DMA_Driver_ComPort3_Rx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort3_Rx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort3_Rx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[130]"></a>DMA_Driver_ComPort3_Tx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort3_Tx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort3_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[131]"></a>DMA_Driver_ComPort4_Rx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort4_Rx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort4_Rx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[132]"></a>DMA_Driver_ComPort4_Tx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort4_Tx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort4_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[133]"></a>DMA_Driver_ComPort5_Rx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort5_Rx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort5_Rx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[134]"></a>DMA_Driver_ComPort5_Tx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort5_Tx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort5_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[135]"></a>DMA_Driver_ComPort6_Rx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort6_Rx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort6_Rx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[136]"></a>DMA_Driver_ComPort6_Tx_Inital</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_ComPort6_Tx_Inital))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Driver_ComPort6_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[137]"></a>DMA_Driver_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dma_driver.o(i.DMA_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Driver_Init &rArr; DMA_Driver_ComPort6_Tx_Inital &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[139]"></a>DRY_RLY1_DeviceCntrl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buzzer_device.o(i.DRY_RLY1_DeviceCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRY_RLY1_DeviceCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenControlRunning
</UL>

<P><STRONG><a name="[13a]"></a>DRY_RLY2_DeviceCntrl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buzzer_device.o(i.DRY_RLY2_DeviceCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRY_RLY2_DeviceCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenControlRunning
</UL>

<P><STRONG><a name="[201]"></a>Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcu.o(i.Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_ReadData
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadPage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_EraseSector
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WriteEnable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WaitForWriteEnd
</UL>

<P><STRONG><a name="[c1]"></a>Delay_us</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, mcu.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_NACK
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ACK
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1bb]"></a>DisplayDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.DisplayDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Handler
</UL>

<P><STRONG><a name="[13d]"></a>DisplayInit</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, lcd_service.o(i.DisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DisplayInit &rArr; SafetyRegulationInit &rArr; SetPcs10HGridStandardInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLanguageInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyRegulationInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayFixFlickerStartPosAndEndPosInit_English
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayFixFlickerStartPosAndEndPosInit_Chinese
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StrategyData_Read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StatisticsData_Read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ProtectInfo_Read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_Password_Read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PVInfo_Read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PCSSerial_Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_LanguageType_Read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_InsulationInfo_Read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ElecPriceData_Read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ControlMode_Read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_CTRadio_Read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Handler
</UL>

<P><STRONG><a name="[14e]"></a>DisplayRunning</STRONG> (Thumb, 3060 bytes, Stack size 56 bytes, lcd_service.o(i.DisplayRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = DisplayRunning &rArr; updateDisplayGridPriceTPFVTimePeriodSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeyDetectionStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayHandleCodeByKeyDetection
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemFactorySetData
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemClearRecordData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemClearFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>DisplaySystemLoginVerify</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lcd_service.o(i.DisplaySystemLoginVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DisplaySystemLoginVerify &rArr; getDisplayPasswordFromFlash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPasswordFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[1a3]"></a>DisplaySystemPasswordVerify</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, lcd_service.o(i.DisplaySystemPasswordVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DisplaySystemPasswordVerify &rArr; getDisplayPasswordFromFlash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPasswordFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[1a5]"></a>Display_ASCII</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, lcd_ks0108_6800_device.o(i.Display_ASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display_ASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[1a7]"></a>Display_ASCII_UnderLine</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lcd_ks0108_6800_device.o(i.Display_ASCII_UnderLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display_ASCII_UnderLine &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[1a8]"></a>Display_Chinese</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, lcd_ks0108_6800_device.o(i.Display_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[1aa]"></a>Display_Clear</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, lcd_ks0108_6800_device.o(i.Display_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display_Clear &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_SetStartRow
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[1ae]"></a>Display_Clear_HistoryFaultData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fault_management_service.o(i.Display_Clear_HistoryFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display_Clear_HistoryFaultData &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_FaultData_Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[1b0]"></a>Display_Clear_OperationRecordData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fault_management_service.o(i.Display_Clear_OperationRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display_Clear_OperationRecordData &rArr; Flash_Device_OperateRecord_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_OperateRecord_Read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[1b2]"></a>Display_Clear_SystemStatistical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_service.o(i.Display_Clear_SystemStatistical))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display_Clear_SystemStatistical &rArr; Flash_Device_StatisticsData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StatisticsData_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[1c5]"></a>Display_Get_BmsSetPara</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_BmsSetPara))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtectParas
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEnergyRunParabyTPFVMode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEnergyRunParabyRegularMode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudBatteryDataSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSFaultBitTransformFaultCode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>

<P><STRONG><a name="[1da]"></a>Display_Get_EMSVersion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_EMSVersion))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_TEMP_COM_Retransmit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommInit
</UL>

<P><STRONG><a name="[223]"></a>Display_Get_ElecPrice</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_ElecPrice))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputTPFVTimeSet
</UL>

<P><STRONG><a name="[1c4]"></a>Display_Get_EnableDetection</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, lcd_service.o(i.Display_Get_EnableDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Display_Get_EnableDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_TEMP_COM_Retransmit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSFaultBitTransformFaultCode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>

<P><STRONG><a name="[218]"></a>Display_Get_GenPara</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_GenPara))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputGenParamSet
</UL>

<P><STRONG><a name="[2c7]"></a>Display_Get_Grid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_Grid))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
</UL>

<P><STRONG><a name="[21b]"></a>Display_Get_GridPara</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_GridPara))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputInvCtrlParamSet
</UL>

<P><STRONG><a name="[494]"></a>Display_Get_HistoryFaultData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fault_management_service.o(i.Display_Get_HistoryFaultData))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_English
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Chinese
</UL>

<P><STRONG><a name="[1b3]"></a>Display_Get_KindPower</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lcd_service.o(i.Display_Get_KindPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display_Get_KindPower &rArr; GetDisplayRealTimeBmsData &rArr; GetDisplayRealTimePlyonBMSData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePVData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeLoadData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeGridData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[4ee]"></a>Display_Get_OperationRecordData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fault_management_service.o(i.Display_Get_OperationRecordData))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
</UL>

<P><STRONG><a name="[21d]"></a>Display_Get_PVPara</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_PVPara))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputPvCtrlParamSet
</UL>

<P><STRONG><a name="[221]"></a>Display_Get_ProtectPara</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_ProtectPara))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
</UL>

<P><STRONG><a name="[543]"></a>Display_Get_RealFaultData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fault_management_service.o(i.Display_Get_RealFaultData))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_English
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Chinese
</UL>

<P><STRONG><a name="[24a]"></a>Display_Get_SystemStatistical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_SystemStatistical))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemStatisticalToCloudData
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
</UL>

<P><STRONG><a name="[219]"></a>Display_Get_SystemStrategy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Get_SystemStrategy))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputTPFVTimeSet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputGenParamSet
</UL>

<P><STRONG><a name="[1b9]"></a>Display_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lcd_service.o(i.Display_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Display_Handler &rArr; DisplayRunning &rArr; updateDisplayGridPriceTPFVTimePeriodSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1bc]"></a>Display_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.Display_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_Init &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_SetStartRow
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_DisplayOn
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1be]"></a>Display_InvASCII</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, lcd_ks0108_6800_device.o(i.Display_InvASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[1a6]"></a>Display_Locate</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lcd_ks0108_6800_device.o(i.Display_Locate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
</UL>

<P><STRONG><a name="[259]"></a>Display_Service_InitVar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_service.o(i.Display_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[1bf]"></a>Display_Set_ControlWay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.Display_Set_ControlWay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_Set_ControlWay &rArr; Flash_Device_ControlMode_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ControlMode_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[152]"></a>Display_Set_UnderLine_Blink_Position</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_ks0108_6800_device.o(i.Display_Set_UnderLine_Blink_Position))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[10c]"></a>EMSCan_ReceivePacket</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, canbus_emsparallel_comdata.o(i.EMSCan_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMSCan_ReceivePacket &rArr; can2_ReceivePacket &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2EmsCan_Receive_Service
</UL>

<P><STRONG><a name="[10e]"></a>EMSCan_SendPacket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canbus_emsparallel_comdata.o(i.EMSCan_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EMSCan_SendPacket &rArr; can2_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_SendPacket
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2EmsCan_Send_Service
</UL>

<P><STRONG><a name="[323]"></a>EUTen_SR_Service_InitVar</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, sr_virtualdevice.o(i.EUTen_SR_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR_Service_InitVar
</UL>

<P><STRONG><a name="[104]"></a>EmsCommunicateBreakCheck</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, modbus.o(i.EmsCommunicateBreakCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsCommunicateBreakCheck &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPcs05HPowerOnOffControl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2WifiGprs_Receive_Service
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Receive_Service
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Receive_Service
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Receive_Service
</UL>

<P><STRONG><a name="[1c7]"></a>EmsCommunicateConnectFinish</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, modbus.o(i.EmsCommunicateConnectFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EmsCommunicateConnectFinish &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
</UL>

<P><STRONG><a name="[1c8]"></a>EmsToBluetoothCommunicateHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToBluetoothCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EmsToBluetoothCommunicateHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBluetoothCommInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bluetooth_Send_Service
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bluetooth_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1cc]"></a>EmsToBmsCanCommunicateHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToBmsCanCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EmsToBmsCanCommunicateHandler &rArr; Comm2BmsCan_Send_Service &rArr; BMSCan_SendPacket &rArr; can1_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCanCommInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2BmsCan_Send_Service
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2BmsCan_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1ce]"></a>EmsToBmsCommunicateHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToBmsCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = EmsToBmsCommunicateHandler &rArr; Comm2Bms_Receive_Service &rArr; MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Send_Service
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Receive_Service
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_ATE_Send_Service
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_ATE_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1d0]"></a>EmsToDebugCommunicateHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToDebugCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EmsToDebugCommunicateHandler &rArr; Comm2Debug_Receive_Service &rArr; GetUsartRxBufLength &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToDebugCommInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Debug_Send_Service
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Debug_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1d3]"></a>EmsToEmsCanCommunicateHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToEmsCanCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EmsToEmsCanCommunicateHandler &rArr; Comm2EmsCan_Send_Service &rArr; EMSCan_SendPacket &rArr; can2_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToEmsCanCommInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2EmsCan_Send_Service
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2EmsCan_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1d5]"></a>EmsToMeterCommunicateHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToMeterCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = EmsToMeterCommunicateHandler &rArr; Comm2Meter_Receive_Service &rArr; MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Send_Service
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Receive_Service
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_ATE_Send_Service
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_ATE_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1db]"></a>EmsToPcsCommunicateHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToPcsCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = EmsToPcsCommunicateHandler &rArr; Comm2Pcs_Receive_Service &rArr; MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1dc]"></a>EmsToWifiGprsCommunicateHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToWifiGprsCommunicateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = EmsToWifiGprsCommunicateHandler &rArr; Comm2WifiGprs_Send_Service &rArr; MB_Slave_Response_RTU_Frame &rArr; MB_PCS_Slave_Response_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToWifiCommInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2WifiGprs_Send_Service
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2WifiGprs_Receive_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1de]"></a>EnergyManagement_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, energy_management_service.o(i.EnergyManagement_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EnergyManagement_Handler &rArr; EnergyRunning &rArr; LocalControlEnergyRunning &rArr; getEnergyRunParabyTPFVMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[25b]"></a>Energy_Service_InitVar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, energy_management_service.o(i.Energy_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[1ed]"></a>FaultDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fault_management_service.o(i.FaultDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultManagement_Handler
</UL>

<P><STRONG><a name="[1eb]"></a>FaultManagement_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fault_management_service.o(i.FaultManagement_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = FaultManagement_Handler &rArr; FaultRunning &rArr; EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultDestruction
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[1ec]"></a>FaultRunning</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, fault_management_service.o(i.FaultRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = FaultRunning &rArr; EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultData
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSFaultBitTransformFaultCode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSFaultBitTransformFaultCode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCanFaultBitTransformFaultCode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultManagement_Handler
</UL>

<P><STRONG><a name="[25c]"></a>Fault_Service_InitVar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fault_management_service.o(i.Fault_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[14a]"></a>Flash_Device_BMSInfo_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_BMSInfo_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_BMSInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudBatteryDataSet
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltPointData
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonMaxCharCurData
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonEndofSOCData
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonComWayFlagData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLeadAcidEndofSOCData
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLeadAcidCapacityAndMaxCharCurData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBmsBatteryTypeData
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatteryManufacturerItem
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLiIonParasData
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLeadAcidParasData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBmsBatteryTypeData
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryManufacturerItem
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1f0]"></a>Flash_Device_BMSInfo_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_BMSInfo_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudBatteryDataSet
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltPointData
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonMaxCharCurData
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonEndofSOCData
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonComWayFlagData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLeadAcidEndofSOCData
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLeadAcidCapacityAndMaxCharCurData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBmsBatteryTypeData
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatteryManufacturerItem
</UL>

<P><STRONG><a name="[146]"></a>Flash_Device_CTRadio_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_CTRadio_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_CTRadio_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[143]"></a>Flash_Device_ControlMode_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, storage_management_service.o(i.Flash_Device_ControlMode_Read))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1c0]"></a>Flash_Device_ControlMode_Write</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, storage_management_service.o(i.Flash_Device_ControlMode_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Device_ControlMode_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_ControlWay
</UL>

<P><STRONG><a name="[1f1]"></a>Flash_Device_EESerialNumber_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_EESerialNumber_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_EESerialNumber_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberInit
</UL>

<P><STRONG><a name="[f1]"></a>Flash_Device_EESerialNumber_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_EESerialNumber_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_EESerialNumber_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSerialNumberErrorProof
</UL>

<P><STRONG><a name="[140]"></a>Flash_Device_ElecPriceData_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_ElecPriceData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_ElecPriceData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1f2]"></a>Flash_Device_ElecPriceData_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_ElecPriceData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_ElecPriceData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputTPFVTimeSet
</UL>

<P><STRONG><a name="[1ea]"></a>Flash_Device_FaultData_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_FaultData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_FaultData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[1af]"></a>Flash_Device_FaultData_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_FaultData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertHistoryFaultQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_HistoryFaultData
</UL>

<P><STRONG><a name="[14c]"></a>Flash_Device_GenInfo_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_GenInfo_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_GenInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIntelLoadParaData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGenParaData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDryNodeUseData
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDryNodeData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntelLoadParaData
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGenParaData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDryNodeUseData
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDryNodeData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1f3]"></a>Flash_Device_GenInfo_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_GenInfo_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_GenInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputGenParamSet
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIntelLoadParaData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGenParaData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDryNodeUseData
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDryNodeData
</UL>

<P><STRONG><a name="[14b]"></a>Flash_Device_GridInfo_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_GridInfo_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_GridInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemSerialData
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSafetyRegulationItem
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReactPowerData
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReactPowerControlWayItem
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerFactorData
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysteSerialData
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSafetyRegulationItem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReactPowerData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReactPowerControlWayItem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPowerFactorData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1f4]"></a>Flash_Device_GridInfo_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_GridInfo_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_GridInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputInvCtrlParamSet
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemSerialData
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSafetyRegulationItem
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReactPowerData
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReactPowerControlWayItem
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerFactorData
</UL>

<P><STRONG><a name="[1f5]"></a>Flash_Device_HardwareVersion_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_HardwareVersion_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_HardwareVersion_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCodeInit
</UL>

<P><STRONG><a name="[ed]"></a>Flash_Device_HardwareVersion_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_HardwareVersion_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_HardwareVersion_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModelCodeErrorProof
</UL>

<P><STRONG><a name="[148]"></a>Flash_Device_InsulationInfo_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, storage_management_service.o(i.Flash_Device_InsulationInfo_Read))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[142]"></a>Flash_Device_LanguageType_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, storage_management_service.o(i.Flash_Device_LanguageType_Read))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemLanguageItem
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[39a]"></a>Flash_Device_LanguageType_Write</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, storage_management_service.o(i.Flash_Device_LanguageType_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Device_LanguageType_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemLanguageItem
</UL>

<P><STRONG><a name="[1b1]"></a>Flash_Device_OperateRecord_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_OperateRecord_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_OperateRecord_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_OperationRecordData
</UL>

<P><STRONG><a name="[1f6]"></a>Flash_Device_OperateRecord_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_OperateRecord_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertOperationRecordQueue
</UL>

<P><STRONG><a name="[145]"></a>Flash_Device_PCSSerial_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_PCSSerial_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_PCSSerial_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[149]"></a>Flash_Device_PVInfo_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_PVInfo_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_PVInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1f7]"></a>Flash_Device_PVInfo_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_PVInfo_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_PVInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputPvCtrlParamSet
</UL>

<P><STRONG><a name="[144]"></a>Flash_Device_Password_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_Password_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_Password_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[147]"></a>Flash_Device_ProtectInfo_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_ProtectInfo_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_ProtectInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1f8]"></a>Flash_Device_ProtectInfo_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_ProtectInfo_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_ProtectInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
</UL>

<P><STRONG><a name="[b5]"></a>Flash_Device_SampleAdjData_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_SampleAdjData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_SampleAdjData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustParamInit
</UL>

<P><STRONG><a name="[1f9]"></a>Flash_Device_SampleAdjData_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_SampleAdjData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_SampleAdjData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[f6]"></a>Flash_Device_StatisticsData_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_StatisticsData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_StatisticsData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearZeroWithKeyNodes
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_SystemStatistical
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[141]"></a>Flash_Device_StrategyData_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_StrategyData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_StrategyData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[1fa]"></a>Flash_Device_StrategyData_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage_management_service.o(i.Flash_Device_StrategyData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Device_StrategyData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputTPFVTimeSet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputGenParamSet
</UL>

<P><STRONG><a name="[203]"></a>GPIO_Driver_Initial</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, gpio_driver.o(i.GPIO_Driver_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GPIO_Driver_Initial &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnablePeriphClockCmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[c4]"></a>GPIO_Driver_ReadInputPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_driver.o(i.GPIO_Driver_ReadInputPin))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Device_GetKeyValue
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_Driver_SetPinMode</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio_driver.o(i.GPIO_Driver_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_Driver_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_NACK
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ACK
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_Driver_WriteOutputPin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio_driver.o(i.GPIO_Driver_WriteOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Module_InitVar
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRY_RLY2_DeviceCntrl
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRY_RLY1_DeviceCntrl
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Device_GridCntrl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Device_GenCntrl
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Device_FaultCntrl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_WriteBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ReadBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_NACK
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_I2C_ACK
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadPage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_EraseSector
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WriteEnable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WaitForWriteEnd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadUniqID
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadStatusRegister
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadID
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[207]"></a>GUI_Clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Clear &rArr; Display_Clear &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLanguageInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[1a9]"></a>GUI_DispCharAt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd_ks0108_6800_device.o(i.GUI_DispCharAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
</UL>

<P><STRONG><a name="[208]"></a>GUI_DispStringAt</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, lcd_ks0108_6800_device.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>

<P><STRONG><a name="[209]"></a>GUI_Display</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, lcd_ks0108_6800_device.o(i.GUI_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_English
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_English
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_English
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_English
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_English
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_English
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_English
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_English
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_English
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_English
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_English
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_English
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_English
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_English
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_English
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_English
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_English
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_English
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_English
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_English
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_English
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_English
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_English
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_English
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_English
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_English
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_English
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_English
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData_English
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_English
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_English
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_English
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_English
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_English
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_English
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_English
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_English
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_English
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_English
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_English
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_English
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_English
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_English
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Chinese
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Chinese
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Chinese
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Chinese
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Chinese
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Chinese
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Chinese
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Chinese
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Chinese
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Chinese
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Chinese
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Chinese
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Chinese
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Chinese
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Chinese
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Chinese
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Chinese
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Chinese
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Chinese
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Chinese
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Chinese
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Chinese
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Chinese
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Chinese
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Chinese
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Chinese
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Chinese
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Chinese
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Chinese
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Chinese
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Chinese
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Chinese
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Chinese
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Chinese
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Chinese
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Chinese
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Chinese
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Chinese
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Chinese
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Chinese
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Chinese
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_English
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_English
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_English
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_English
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_English
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_English
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_English
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_English
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_English
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_English
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_English
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_English
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_English
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_English
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_English
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_English
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_English
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Spanish
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Polish
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Italian
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_German
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_French
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_English
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Dutch
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Czech
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_English
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_English
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_English
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_English
</UL>

<P><STRONG><a name="[13e]"></a>GUI_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Init &rArr; Display_Clear &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[324]"></a>Germany_SR_Service_InitVar</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, sr_virtualdevice.o(i.Germany_SR_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR_Service_InitVar
</UL>

<P><STRONG><a name="[1e4]"></a>GetBMSProtectParam</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, battery_protect_service.o(i.GetBMSProtectParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetBMSProtectParam &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[20f]"></a>GetBatInfoToCloudData</STRONG> (Thumb, 322 bytes, Stack size 80 bytes, modbus_cloud_comdata.o(i.GetBatInfoToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetBatInfoToCloudData &rArr; GetDisplayDCDCFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDCDCFault
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsPylonMutualInfo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsPylonAnalogInfo
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[214]"></a>GetBmsComDataIndex_03H</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, modbus_bms_comdata.o(i.GetBmsComDataIndex_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBmsComDataIndex_03H
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsCvteComDataIndex_03H
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Register_Index
</UL>

<P><STRONG><a name="[215]"></a>GetBmsCvteComDataIndex_03H</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, modbus_bms_comdata.o(i.GetBmsCvteComDataIndex_03H))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsComDataIndex_03H
</UL>

<P><STRONG><a name="[210]"></a>GetBmsPylonAnalogInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_bms_comdata.o(i.GetBmsPylonAnalogInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetBmsPylonAnalogInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatInfoToCloudData
</UL>

<P><STRONG><a name="[211]"></a>GetBmsPylonMutualInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_bms_comdata.o(i.GetBmsPylonMutualInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetBmsPylonMutualInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatInfoToCloudData
</UL>

<P><STRONG><a name="[216]"></a>GetCloudBatteryDataSet</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, modbus_cloud_comdata.o(i.GetCloudBatteryDataSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCloudBatteryDataSet &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_BmsSetPara
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
</UL>

<P><STRONG><a name="[217]"></a>GetCloudInputGenParamSet</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, modbus_cloud_comdata.o(i.GetCloudInputGenParamSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetCloudInputGenParamSet &rArr; Flash_Device_StrategyData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_SystemStrategy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_GenPara
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StrategyData_Write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
</UL>

<P><STRONG><a name="[21a]"></a>GetCloudInputInvCtrlParamSet</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, modbus_cloud_comdata.o(i.GetCloudInputInvCtrlParamSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCloudInputInvCtrlParamSet &rArr; Flash_Device_GridInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_GridPara
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
</UL>

<P><STRONG><a name="[21c]"></a>GetCloudInputPvCtrlParamSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modbus_cloud_comdata.o(i.GetCloudInputPvCtrlParamSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCloudInputPvCtrlParamSet &rArr; Flash_Device_PVInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_PVInfo_Write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_PVPara
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
</UL>

<P><STRONG><a name="[21e]"></a>GetCloudInputSysParamTimeSet</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, modbus_cloud_comdata.o(i.GetCloudInputSysParamTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ProtectInfo_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemLanguageItem
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLanguageInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_ProtectPara
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTime
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ProtectInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
</UL>

<P><STRONG><a name="[222]"></a>GetCloudInputTPFVTimeSet</STRONG> (Thumb, 1036 bytes, Stack size 16 bytes, modbus_cloud_comdata.o(i.GetCloudInputTPFVTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetCloudInputTPFVTimeSet &rArr; Flash_Device_ElecPriceData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_ElecPriceData_Write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConvertCloudInputTime
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_SystemStrategy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_ElecPrice
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_StrategyData_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
</UL>

<P><STRONG><a name="[225]"></a>GetComDataToCloud_03H</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, modbus_cloud_comdata.o(i.GetComDataToCloud_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemStatisticalToCloudData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVInfoToCloudData
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadInfoToCloudData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvGenInfoToCloudData
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGirdParmInfoToCloudData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatInfoToCloudData
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_03H
</UL>

<P><STRONG><a name="[249]"></a>GetComDataToCloud_10H</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, modbus_cloud_comdata.o(i.GetComDataToCloud_10H))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_10H
</UL>

<P><STRONG><a name="[224]"></a>GetConvertCloudInputTime</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, modbus_cloud_comdata.o(i.GetConvertCloudInputTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetConvertCloudInputTime &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputTPFVTimeSet
</UL>

<P><STRONG><a name="[1e3]"></a>GetDCDCInformation</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDCDCInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDCDCInformation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCoreData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[22c]"></a>GetDisplayBMSCanFault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canbus_bms_comdata.o(i.GetDisplayBMSCanFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayBMSCanFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSCanFaultData
</UL>

<P><STRONG><a name="[22e]"></a>GetDisplayBMSFault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_bms_comdata.o(i.GetDisplayBMSFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayBMSFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSFaultData
</UL>

<P><STRONG><a name="[212]"></a>GetDisplayDCDCFault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplayDCDCFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayDCDCFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatInfoToCloudData
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
</UL>

<P><STRONG><a name="[151]"></a>GetDisplayDeviceFaultState</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, fault_management_service.o(i.GetDisplayDeviceFaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetDisplayDeviceFaultState &rArr; GetDisplayDeviceFaultData &rArr; GetDisplayPCSFaultData &rArr; GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayInvState
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultData
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_EnableDetection
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_BmsSetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndicationStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[234]"></a>GetDisplayEMSCommFault</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayEMSCommFault))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayEMSFaultData
</UL>

<P><STRONG><a name="[239]"></a>GetDisplayGenFault</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayGenFault))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
</UL>

<P><STRONG><a name="[20b]"></a>GetDisplayGridGenState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayGridGenState))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenControlRunning
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndicationStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[235]"></a>GetDisplayInvFault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplayInvFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayInvFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
</UL>

<P><STRONG><a name="[232]"></a>GetDisplayInvState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayInvState))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>

<P><STRONG><a name="[237]"></a>GetDisplayPVFault</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplayPVFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPV2Fault
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPV1Fault
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
</UL>

<P><STRONG><a name="[1b6]"></a>GetDisplayRealTimeBmsData</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, modbus_bms_comdata.o(i.GetDisplayRealTimeBmsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDisplayRealTimeBmsData &rArr; GetDisplayRealTimePlyonBMSData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePlyonBMSData
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeCvteBMSData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePlyonBMSCanData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeLeadBatteryData
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtectParas
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_KindPower
</UL>

<P><STRONG><a name="[1ba]"></a>GetDisplayRealTimeData</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_service.o(i.GetDisplayRealTimeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayRealTimeData &rArr; GetDisplayRealTimeBmsData &rArr; GetDisplayRealTimePlyonBMSData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePVData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeLoadData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeGridData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeGenData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Handler
</UL>

<P><STRONG><a name="[240]"></a>GetDisplayRealTimeGenData</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayRealTimeGenData))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeData
</UL>

<P><STRONG><a name="[1b4]"></a>GetDisplayRealTimeGridData</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, modbus_meter_comdata.o(i.GetDisplayRealTimeGridData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDisplayRealTimeGridData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_KindPower
</UL>

<P><STRONG><a name="[23f]"></a>GetDisplayRealTimeLeadBatteryData</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, battery_protect_service.o(i.GetDisplayRealTimeLeadBatteryData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDisplayRealTimeLeadBatteryData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>

<P><STRONG><a name="[1b7]"></a>GetDisplayRealTimeLoadData</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayRealTimeLoadData))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadInfoToCloudData
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_KindPower
</UL>

<P><STRONG><a name="[1b5]"></a>GetDisplayRealTimePVData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplayRealTimePVData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDisplayRealTimePVData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePV2Data
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePV1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_KindPower
</UL>

<P><STRONG><a name="[23c]"></a>GetDisplayRealTimePlyonBMSCanData</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, canbus_bms_comdata.o(i.GetDisplayRealTimePlyonBMSCanData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDisplayRealTimePlyonBMSCanData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>

<P><STRONG><a name="[243]"></a>GetDisplaySoftwareVersion</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplaySoftwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplaySoftwareVersion &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
</UL>

<P><STRONG><a name="[238]"></a>GetDisplaySysAlarm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplaySysAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
</UL>

<P><STRONG><a name="[236]"></a>GetDisplaySystemFault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplaySystemFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplaySystemFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
</UL>

<P><STRONG><a name="[20c]"></a>GetGenRunState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetGenRunState))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenControlRunning
</UL>

<P><STRONG><a name="[227]"></a>GetGirdParmInfoToCloudData</STRONG> (Thumb, 222 bytes, Stack size 152 bytes, modbus_cloud_comdata.o(i.GetGirdParmInfoToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetGirdParmInfoToCloudData &rArr; GetInvInformation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvInformation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[22a]"></a>GetInvGenInfoToCloudData</STRONG> (Thumb, 486 bytes, Stack size 152 bytes, modbus_cloud_comdata.o(i.GetInvGenInfoToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetInvGenInfoToCloudData &rArr; GetInvInformation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvInformation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[244]"></a>GetInvInformation</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetInvInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetInvInformation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInvGenInfoToCloudData
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGirdParmInfoToCloudData
</UL>

<P><STRONG><a name="[229]"></a>GetLoadInfoToCloudData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, modbus_cloud_comdata.o(i.GetLoadInfoToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLoadInfoToCloudData
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeLoadData
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[2eb]"></a>GetMeterComDataIndex_03H</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, modbus_meter_comdata.o(i.GetMeterComDataIndex_03H))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Register_Index
</UL>

<P><STRONG><a name="[245]"></a>GetPV1Information</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetPV1Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPV1Information &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVInfoToCloudData
</UL>

<P><STRONG><a name="[246]"></a>GetPV2Information</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetPV2Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPV2Information &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVInfoToCloudData
</UL>

<P><STRONG><a name="[228]"></a>GetPVInfoToCloudData</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, modbus_cloud_comdata.o(i.GetPVInfoToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetPVInfoToCloudData &rArr; GetPV2Information &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPV2Information
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPV1Information
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[1e2]"></a>GetPcs10HEmsParam</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetPcs10HEmsParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPcs10HEmsParam &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[2e8]"></a>GetPcsComDataIndex_01H</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetPcsComDataIndex_01H))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Register_Index
</UL>

<P><STRONG><a name="[247]"></a>GetPcsComDataIndex_03H</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, modbus_pcs_comdata.o(i.GetPcsComDataIndex_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Register_Index
</UL>

<P><STRONG><a name="[2ed]"></a>GetPcsComDataIndex_05H</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetPcsComDataIndex_05H))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Register_Index
</UL>

<P><STRONG><a name="[2ef]"></a>GetPcsComDataIndex_0FH</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetPcsComDataIndex_0FH))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Register_Index
</UL>

<P><STRONG><a name="[248]"></a>GetPcsComDataIndex_10H</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, modbus_pcs_comdata.o(i.GetPcsComDataIndex_10H))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_10H
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Register_Index
</UL>

<P><STRONG><a name="[2d1]"></a>GetRegsBytesNum</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, modbus.o(i.GetRegsBytesNum))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[22b]"></a>GetSystemStatisticalToCloudData</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, modbus_cloud_comdata.o(i.GetSystemStatisticalToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSystemStatisticalToCloudData
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_SystemStatistical
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[24b]"></a>GetTotalParamInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetTotalParamInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetTotalParamInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
</UL>

<P><STRONG><a name="[226]"></a>GetTotalSysParamToCloudData</STRONG> (Thumb, 762 bytes, Stack size 344 bytes, modbus_cloud_comdata.o(i.GetTotalSysParamToCloudData))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalParamInfo
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPV2Information
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPV1Information
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemLanguageItem
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySoftwareVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComDataToCloud_03H
</UL>

<P><STRONG><a name="[109]"></a>GetUsartRxBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_driver.o(i.GetUsartRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Debug_Receive_Service
</UL>

<P><STRONG><a name="[10a]"></a>GetUsartRxBufLength</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, uart_driver.o(i.GetUsartRxBufLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUsartRxBufLength &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Debug_Receive_Service
</UL>

<P><STRONG><a name="[2cb]"></a>GetUsartTxBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_driver.o(i.GetUsartTxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_ASCII_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Meter_Slave_Response_RTU_Frame
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BMS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[24f]"></a>Get_NTC_Para</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ntc_drm_service.o(i.Get_NTC_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_NTC_Para &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_TEMP_COM_Retransmit
</UL>

<P><STRONG><a name="[f3]"></a>Get_SysTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_service.o(i.Get_SysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_SysTime &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGenControlFlag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearZeroWithKeyNodes
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTCTimetoDisplayTime
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
</UL>

<P><STRONG><a name="[250]"></a>GlobalVar_InitModules</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, globalvar.o(i.GlobalVar_InitModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GlobalVar_InitModules &rArr; Storage_Service_InitVar &rArr; Storage_Service_UserConfigParaDaultTable_Init &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask_InitVar
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_InitVar
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Statistics_Service_InitVar
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Service_InitVar
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_InitVar
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_RTU_InitVar
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_RTU_InitVar
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Device_KS0108_6800_InitVar
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indication_Service_InitVar
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Service_InitVar
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Service_InitVar
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Service_InitVar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Module_InitVar
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Service_InitVar
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Service_InitVar
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_InitVar
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Globalvar_InitVar
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[251]"></a>Globalvar_InitVar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, globalvar.o(i.Globalvar_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[ad]"></a>HAL_ADCEx_Calibration_GetValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_Initial
</UL>

<P><STRONG><a name="[ae]"></a>HAL_ADCEx_Calibration_SetValue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_Initial
</UL>

<P><STRONG><a name="[ac]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32g0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_Initial
</UL>

<P><STRONG><a name="[aa]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, stm32g0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_ADC1_Init
</UL>

<P><STRONG><a name="[304]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_DRM_ADC_Handler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_ADC_Init</STRONG> (Thumb, 686 bytes, Stack size 32 bytes, stm32g0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonChannels
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_ADC1_Init
</UL>

<P><STRONG><a name="[263]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, adc_driver.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[267]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32g0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_DRM_ADC_Handler
</UL>

<P><STRONG><a name="[269]"></a>HAL_ADC_Start</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_DRM_ADC_Handler
</UL>

<P><STRONG><a name="[370]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[26b]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_SendPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_SendPacket
</UL>

<P><STRONG><a name="[36d]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[36e]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_ConfigGlobalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[278]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[277]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[27c]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[26e]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[26d]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_FDCAN_IT1_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_FDCAN_IT0_IRQHandler
</UL>

<P><STRONG><a name="[279]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 546 bytes, Stack size 16 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FDCAN_Init &rArr; FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[27a]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[271]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, can_driver.o(i.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushCanData
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[272]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, can_driver.o(i.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FDCAN_RxFifo1Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[36f]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[276]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[275]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[26f]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[274]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[270]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[273]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_fdcan.o(i.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[266]"></a>HAL_GPIO_Init</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[a7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[33d]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_InitTick</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32g0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Initial
</UL>

<P><STRONG><a name="[f9]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Initial
</UL>

<P><STRONG><a name="[27f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[281]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 996 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[282]"></a>HAL_SPI_Init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Driver_SPI1_Init
</UL>

<P><STRONG><a name="[283]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, spi_driver.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[284]"></a>HAL_SPI_Receive</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadPage
</UL>

<P><STRONG><a name="[286]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>

<P><STRONG><a name="[27e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32g0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[288]"></a>Hardware_DectectCLK</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timetask.o(i.Hardware_DectectCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hardware_DectectCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Reload
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[2fe]"></a>Hardware_SetCLK</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, timetask.o(i.Hardware_SetCLK))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[28a]"></a>Hex2Float_IEEE745</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, modbus_rtu_master.o(i.Hex2Float_IEEE745))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Hex2Float_IEEE745 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sMeterDataUnified
</UL>

<P><STRONG><a name="[28f]"></a>IndicationManagement_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, indication_management_service.o(i.IndicationManagement_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IndicationManagement_Handler &rArr; IndicationRunning &rArr; getIndicationStatus &rArr; GetDisplayDeviceFaultState &rArr; GetDisplayDeviceFaultData &rArr; GetDisplayPCSFaultData &rArr; GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationRunning
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[25d]"></a>Indication_Service_InitVar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, indication_management_service.o(i.Indication_Service_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[294]"></a>InsertOperationRecordQueue</STRONG> (Thumb, 174 bytes, Stack size 664 bytes, fault_management_service.o(i.InsertOperationRecordQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_OperateRecord_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
</UL>

<P><STRONG><a name="[1bd]"></a>KS0108_DisplayOn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.KS0108_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KS0108_DisplayOn &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[1ad]"></a>KS0108_SetStartRow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.KS0108_SetStartRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>

<P><STRONG><a name="[297]"></a>Key_Device_GetKeyValue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, key_device.o(i.Key_Device_GetKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_Device_GetKeyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_ReadInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeyDetectionStatus
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Debounce_Handler
</UL>

<P><STRONG><a name="[298]"></a>Key_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, key_service.o(i.Key_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Handler &rArr; Key_Debounce_Handler &rArr; Key_Device_GetKeyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Time_Handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Status_Handler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Debounce_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[25f]"></a>LCD_Device_KS0108_6800_InitVar</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lcd_ks0108_6800_device.o(i.LCD_Device_KS0108_6800_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[28e]"></a>LED_Device_FaultCntrl</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, buzzer_device.o(i.LED_Device_FaultCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Device_FaultCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationLightLogic
</UL>

<P><STRONG><a name="[28c]"></a>LED_Device_GenCntrl</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, buzzer_device.o(i.LED_Device_GenCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Device_GenCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationLightLogic
</UL>

<P><STRONG><a name="[28d]"></a>LED_Device_GridCntrl</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, buzzer_device.o(i.LED_Device_GridCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Device_GridCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationLightLogic
</UL>

<P><STRONG><a name="[205]"></a>LL_GPIO_Init</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32g0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_Initial
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[29c]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[2a0]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[fa]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Initial
</UL>

<P><STRONG><a name="[347]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_BDTR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[344]"></a>LL_TIM_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[2a4]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_TIM_OC_Init &rArr; OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC6Config
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC5Config
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[2b6]"></a>LL_USART_Init</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stm32g0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[119]"></a>MB_Master_Meter_Retransmit</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, modbus_rtu_master.o(i.MB_Master_Meter_Retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_Master_Meter_Retransmit &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
</UL>

<P><STRONG><a name="[2ce]"></a>MB_Master_Parsing_ASCII_Frame</STRONG> (Thumb, 2330 bytes, Stack size 24 bytes, modbus_ascii_master.o(i.MB_Master_Parsing_ASCII_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_Master_Parsing_ASCII_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusChar2Bin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
</UL>

<P><STRONG><a name="[255]"></a>MB_Master_RTU_InitVar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus_rtu_master.o(i.MB_Master_RTU_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[118]"></a>MB_Master_RTU_Retransmit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, modbus_rtu_master.o(i.MB_Master_RTU_Retransmit))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[102]"></a>MB_Master_Receive_ASCII_Frame</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, modbus_ascii_master.o(i.MB_Master_Receive_ASCII_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MB_Master_Receive_ASCII_Frame &rArr; UART_DmaStartRx &rArr; LL_USART_EnableIT_RTO
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBufLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBuf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusChar2Bin
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_ASCII_Frame
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusLRC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateConnectFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Receive_Service
</UL>

<P><STRONG><a name="[103]"></a>MB_Master_Receive_RTU_Frame</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, modbus_rtu_master.o(i.MB_Master_Receive_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBufLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBuf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCRC16
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateConnectFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Receive_Service
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Receive_Service
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Receive_Service
</UL>

<P><STRONG><a name="[11a]"></a>MB_Master_TEMP_COM_Retransmit</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, modbus_rtu_master.o(i.MB_Master_TEMP_COM_Retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MB_Master_TEMP_COM_Retransmit &rArr; Get_NTC_Para &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_EMSVersion
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_EnableDetection
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
</UL>

<P><STRONG><a name="[2d9]"></a>MB_Master_Transmit_ASCII_Frame</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, modbus_ascii_master.o(i.MB_Master_Transmit_ASCII_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MB_Master_Transmit_ASCII_Frame &rArr; UART_DmaStartTx &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBin2Char
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartTxBuf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Send_ASCII_Plyon_Frame
</UL>

<P><STRONG><a name="[2d8]"></a>MB_Master_Transmit_ASCII_Prepare</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, modbus_ascii_master.o(i.MB_Master_Transmit_ASCII_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Send_ASCII_Plyon_Frame
</UL>

<P><STRONG><a name="[115]"></a>MB_Master_Transmit_RTU_Frame</STRONG> (Thumb, 746 bytes, Stack size 56 bytes, modbus_rtu_master.o(i.MB_Master_Transmit_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MB_Master_Transmit_RTU_Frame &rArr; MB_RTU_10H_Register_Index &rArr; GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Register_Index
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Register_Index
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Register_Index
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartTxBuf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Send_RTU_Cvte_Frame
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Send_Service
</UL>

<P><STRONG><a name="[114]"></a>MB_Master_Transmit_RTU_Prepare</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbus_rtu_master.o(i.MB_Master_Transmit_RTU_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_Master_Transmit_RTU_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Send_RTU_Cvte_Frame
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Send_Service
</UL>

<P><STRONG><a name="[2e4]"></a>MB_PCS_Slave_Response_RTU_Frame</STRONG> (Thumb, 1472 bytes, Stack size 64 bytes, modbus_rtu_slave.o(i.MB_PCS_Slave_Response_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = MB_PCS_Slave_Response_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Range_Check
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Range_Check
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Register_Index
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Range_Check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Register_Index
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Range_Check
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Register_Index
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Range_Check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartTxBuf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCRC16
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegsBytesNum
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2e5]"></a>MB_RTU_01H_Range_Check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_01H_Range_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_01H_Range_Check &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPCSComDataRange_01H
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2d2]"></a>MB_RTU_01H_Register_Index</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_01H_Register_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_01H_Register_Index &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_01H
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2e6]"></a>MB_RTU_03H_Range_Check</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_03H_Range_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MB_RTU_03H_Range_Check &rArr; CheckBmsComDataRange_03H
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPCSComDataRange_03H
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmsCloudComDataRange_03H
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBmsComDataRange_03H
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2d3]"></a>MB_RTU_03H_Register_Index</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_03H_Register_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_03H
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterComDataIndex_03H
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBmsComDataIndex_03H
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2e1]"></a>MB_RTU_05H_Range_Check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_05H_Range_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_05H_Range_Check &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPCSComDataRange_05H
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2d5]"></a>MB_RTU_05H_Register_Index</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_05H_Register_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_05H_Register_Index &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_05H
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2e2]"></a>MB_RTU_0FH_Range_Check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_0FH_Range_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_0FH_Range_Check &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPCSComDataRange_0FH
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2dc]"></a>MB_RTU_0FH_Register_Index</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_0FH_Register_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_0FH_Register_Index &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_0FH
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2df]"></a>MB_RTU_10H_Range_Check</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_10H_Range_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MB_RTU_10H_Range_Check &rArr; CheckPCSComDataRange_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPCSComDataRange_10H
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmsCloudComDataRange_10H
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2db]"></a>MB_RTU_10H_Register_Index</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_data_deal.o(i.MB_RTU_10H_Register_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MB_RTU_10H_Register_Index &rArr; GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_10H
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[256]"></a>MB_Slave_RTU_InitVar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus_rtu_slave.o(i.MB_Slave_RTU_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[fe]"></a>MB_Slave_Receive_RTU_Frame</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, modbus_rtu_slave.o(i.MB_Slave_Receive_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = MB_Slave_Receive_RTU_Frame &rArr; MB_Slave_Parsing_RTU_Frame &rArr; MB_PCS_Slave_Parsing_RTU_Frame &rArr; SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBufLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBuf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Parsing_RTU_Frame
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCRC16
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateConnectFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2WifiGprs_Receive_Service
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_ATE_Receive_Service
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_ATE_Receive_Service
</UL>

<P><STRONG><a name="[100]"></a>MB_Slave_Response_RTU_Frame</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus_rtu_slave.o(i.MB_Slave_Response_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = MB_Slave_Response_RTU_Frame &rArr; MB_PCS_Slave_Response_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Meter_Slave_Response_RTU_Frame
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BMS_Slave_Response_RTU_Frame
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BLT_Slave_Response_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2WifiGprs_Send_Service
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_ATE_Send_Service
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_ATE_Send_Service
</UL>

<P><STRONG><a name="[2e0]"></a>MB_Time_Calibrate</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, modbus_rtu_slave.o(i.MB_Time_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_Time_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2f6]"></a>MCU_InitSystemDriver</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mcu.o(i.MCU_InitSystemDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCU_InitSystemDriver &rArr; UART_Driver_Init &rArr; UART_Driver_ComPort6_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_Driver_Initial
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_driver_Initial
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_Initial
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Driver_Initial
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_Initial
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[2d4]"></a>MergeData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modbus.o(i.MergeData))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_RTU_Frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2da]"></a>ModbusBin2Char</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, modbus_ascii_master.o(i.ModbusBin2Char))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_ASCII_Frame
</UL>

<P><STRONG><a name="[2cc]"></a>ModbusCRC16</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, modbus.o(i.ModbusCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModbusCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Meter_Slave_Response_RTU_Frame
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BMS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2cf]"></a>ModbusChar2Bin</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, modbus_ascii_master.o(i.ModbusChar2Bin))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Parsing_ASCII_Frame
</UL>

<P><STRONG><a name="[2d7]"></a>ModbusLRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modbus.o(i.ModbusLRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_ASCII_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
</UL>

<P><STRONG><a name="[254]"></a>Modbus_InitVar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modbus.o(i.Modbus_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modbus_InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[303]"></a>NTC_DRM_ADC_Handler</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ntc_drm_service.o(i.NTC_DRM_ADC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NTC_DRM_ADC_Handler &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAvgTemp_SDNT1608
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAvgTemp_HCS41A103F8
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[2fa]"></a>NVIC_Initial</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, mcu.o(i.NVIC_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Initial &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_IDLE
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[300]"></a>RTC_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rtc_service.o(i.RTC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RTC_Handler &rArr; RTCRunning &rArr; Get_DeviceTime &rArr; BL5372_Device_Get_Time &rArr; BL5372_Device_Read_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCRunning
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[258]"></a>RTC_Service_InitVar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_service.o(i.RTC_Service_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Service_InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[316]"></a>SPI_Driver_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi_driver.o(i.SPI_Driver_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Driver_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_driver_Initial
</UL>

<P><STRONG><a name="[319]"></a>SPI_Flash_Device_GD25qxx_EraseSector</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_Flash_Device_GD25qxx_EraseSector &rArr; GD25qxx_WriteEnable &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WriteEnable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WaitForWriteEnd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
</UL>

<P><STRONG><a name="[31a]"></a>SPI_Flash_Device_GD25qxx_Init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SPI_Flash_Device_GD25qxx_Init &rArr; GD25qxx_ReadID &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadUniqID
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadStatusRegister
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadID
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageInit
</UL>

<P><STRONG><a name="[31b]"></a>SPI_Flash_Device_GD25qxx_ReadBytes</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Flash_Device_GD25qxx_ReadBytes &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Save
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Read
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Save
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Save
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Read
</UL>

<P><STRONG><a name="[31c]"></a>SPI_Flash_Device_GD25qxx_ReadPage</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadSector
</UL>

<P><STRONG><a name="[31d]"></a>SPI_Flash_Device_GD25qxx_ReadSector</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_SectorToPage
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadPage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
</UL>

<P><STRONG><a name="[31e]"></a>SPI_Flash_Device_GD25qxx_SectorToPage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_SectorToPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Flash_Device_GD25qxx_SectorToPage
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteSector
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadSector
</UL>

<P><STRONG><a name="[31f]"></a>SPI_Flash_Device_GD25qxx_WriteBytes</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SPI_Flash_Device_GD25qxx_WriteBytes &rArr; SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteSector
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadSector
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_EraseSector
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Save
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Save
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Save
</UL>

<P><STRONG><a name="[321]"></a>SPI_Flash_Device_GD25qxx_WritePage</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_Flash_Device_GD25qxx_WritePage &rArr; GD25qxx_WriteEnable &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WriteEnable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WaitForWriteEnd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteSector
</UL>

<P><STRONG><a name="[320]"></a>SPI_Flash_Device_GD25qxx_WriteSector</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, flash_device.o(i.SPI_Flash_Device_GD25qxx_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SPI_Flash_Device_GD25qxx_WriteSector &rArr; SPI_Flash_Device_GD25qxx_WritePage &rArr; GD25qxx_WriteEnable &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_SectorToPage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
</UL>

<P><STRONG><a name="[2f9]"></a>SPI_driver_Initial</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_driver.o(i.SPI_driver_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_driver_Initial &rArr; SPI_Driver_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Driver_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[322]"></a>SR_Service_InitVar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sr_virtualdevice.o(i.SR_Service_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SR_Service_InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Germany_SR_Service_InitVar
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUTen_SR_Service_InitVar
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyRegulationInit
</UL>

<P><STRONG><a name="[14d]"></a>SafetyRegulationInit</STRONG> (Thumb, 920 bytes, Stack size 168 bytes, lcd_service.o(i.SafetyRegulationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SafetyRegulationInit &rArr; SetPcs10HGridStandardInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SRInfo
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPcs10HGridStandardInfo
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR_Service_InitVar
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[3c0]"></a>SetBmsComWayType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_bms_comdata.o(i.SetBmsComWayType))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3e6]"></a>SetBmsProtocolType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_bms_comdata.o(i.SetBmsProtocolType))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[2e3]"></a>SetComDataToCloud_10H</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, modbus_cloud_comdata.o(i.SetComDataToCloud_10H))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputTPFVTimeSet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputPvCtrlParamSet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputInvCtrlParamSet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputGenParamSet
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudBatteryDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[1c6]"></a>SetPcs05HPowerOnOffControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.SetPcs05HPowerOnOffControl))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[1e8]"></a>SetPcs10HEnergyStrategy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.SetPcs10HEnergyStrategy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPcs10HEnergyStrategy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[326]"></a>SetPcs10HGridStandardInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.SetPcs10HGridStandardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPcs10HGridStandardInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyRegulationInit
</UL>

<P><STRONG><a name="[33e]"></a>SetSingleRowSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_ks0108_6800_device.o(i.SetSingleRowSize))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLanguageInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[220]"></a>Set_SysTime</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, rtc_service.o(i.Set_SysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayTimetoRTCTime
</UL>

<P><STRONG><a name="[32a]"></a>StatisticsDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statistics_management_service.o(i.StatisticsDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsManagement_Handler
</UL>

<P><STRONG><a name="[328]"></a>StatisticsInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, statistics_management_service.o(i.StatisticsInit))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsManagement_Handler
</UL>

<P><STRONG><a name="[302]"></a>StatisticsManagement_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, statistics_management_service.o(i.StatisticsManagement_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = StatisticsManagement_Handler &rArr; StatisticsRunning &rArr; ClearZeroWithKeyNodes &rArr; Flash_Device_StatisticsData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsRunning
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[329]"></a>StatisticsRunning</STRONG> (Thumb, 908 bytes, Stack size 48 bytes, statistics_management_service.o(i.StatisticsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = StatisticsRunning &rArr; ClearZeroWithKeyNodes &rArr; Flash_Device_StatisticsData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearZeroWithKeyNodes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePVAverageFilterValue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateOutputAverageFilterValue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLoadAverageFilterValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateInputAverageFilterValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDisChargeAverageFilterValue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateChargeAverageFilterValue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_SystemStatistical
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_KindPower
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsManagement_Handler
</UL>

<P><STRONG><a name="[25e]"></a>Statistics_Service_InitVar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, statistics_management_service.o(i.Statistics_Service_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Statistics_Service_InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[33f]"></a>StorageDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, storage_management_service.o(i.StorageDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_Handler
</UL>

<P><STRONG><a name="[32c]"></a>StorageInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, storage_management_service.o(i.StorageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = StorageInit &rArr; SPI_Flash_Device_GD25qxx_Init &rArr; GD25qxx_ReadID &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_ReadData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_Handler
</UL>

<P><STRONG><a name="[32d]"></a>StorageRunning</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, storage_management_service.o(i.StorageRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = StorageRunning &rArr; Storage_Service_UserConfigPara_Save &rArr; SPI_Flash_Device_GD25qxx_WriteBytes &rArr; SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Save
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Save
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_Handler
</UL>

<P><STRONG><a name="[25a]"></a>Storage_Service_InitVar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, storage_management_service.o(i.Storage_Service_InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Storage_Service_InitVar &rArr; Storage_Service_UserConfigParaDaultTable_Init &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigParaDaultTable_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryParaDaultTable_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryParaDaultTable_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[29b]"></a>SubDecU16Cnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, publicfunc.o(i.SubDecU16Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Time_Handler
</UL>

<P><STRONG><a name="[5a6]"></a>SysSoftwareReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mcu.o(i.SysSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mcu.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_stm32g0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>SystemLanguageInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd_service.o(i.SystemLanguageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemLanguageInit &rArr; GUI_Clear &rArr; Display_Clear &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemLanguageItem
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRowSize
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInit
</UL>

<P><STRONG><a name="[301]"></a>SystemPara_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, storage_management_service.o(i.SystemPara_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SystemPara_Handler &rArr; StorageRunning &rArr; Storage_Service_UserConfigPara_Save &rArr; SPI_Flash_Device_GD25qxx_WriteBytes &rArr; SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageRunning
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageDestruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[2fc]"></a>SystemPara_ReadData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, storage_management_service.o(i.SystemPara_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemPara_ReadData &rArr; Storage_Service_UserConfigPara_Read &rArr; SPI_Flash_Device_GD25qxx_ReadBytes &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Read
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Read
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[340]"></a>SystemPara_RestoreFactorySetData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, storage_management_service.o(i.SystemPara_RestoreFactorySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SystemPara_RestoreFactorySetData &rArr; Storage_Service_UserConfigParaDaultTable_Init &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigParaDaultTable_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryParaDaultTable_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[21]"></a>TIM15_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mcu.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_TIMER_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM16_FDCAN_IT0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu.o(i.TIM16_FDCAN_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM16_FDCAN_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM17_FDCAN_IT1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu.o(i.TIM17_FDCAN_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM17_FDCAN_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[34c]"></a>TIM_Driver_TIM1_PWM_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tim_driver.o(i.TIM_Driver_TIM1_PWM_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Driver_TIM1_PWM_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
</UL>

<P><STRONG><a name="[2f8]"></a>Tim_Driver_Initial</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tim_driver.o(i.Tim_Driver_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Tim_Driver_Initial &rArr; TIM_Driver_TIM1_Initial &rArr; LL_TIM_OC_Init &rArr; OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[252]"></a>TimeTask_InitVar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timetask.o(i.TimeTask_InitVar))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
</UL>

<P><STRONG><a name="[2ff]"></a>Time_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timetask.o(i.Time_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[34e]"></a>UART_DmaResetTx</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, uart_driver.o(i.UART_DmaResetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_DmaResetTx &rArr; LL_USART_EnableDMAReq_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableDMAReq_TX
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[2d6]"></a>UART_DmaStartRx</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, uart_driver.o(i.UART_DmaStartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_DmaStartRx &rArr; LL_USART_EnableIT_RTO
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RTO
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDirectionRx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_RTO
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableDMAReq_RX
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
</UL>

<P><STRONG><a name="[2cd]"></a>UART_DmaStartTx</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, uart_driver.o(i.UART_DmaStartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DmaStartTx &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_ASCII_Frame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Response_RTU_Frame
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Meter_Slave_Response_RTU_Frame
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BMS_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2f7]"></a>UART_Driver_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, uart_driver.o(i.UART_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UART_Driver_Init &rArr; UART_Driver_ComPort6_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaResetTx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
</UL>

<P><STRONG><a name="[28]"></a>USART1_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mcu.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_IDLE
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_IDLE
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_IDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USART2_LPUART2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mcu.o(i.USART2_LPUART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_LPUART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_IDLE
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_IDLE
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_IDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USART3_4_5_6_LPUART1_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, mcu.o(i.USART3_4_5_6_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_4_5_6_LPUART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_IDLE
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_IDLE
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_IDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2fd]"></a>WatchDog_Initial</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg_driver.o(i.WatchDog_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WatchDog_Initial &rArr; MX_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>

<P><STRONG><a name="[289]"></a>WatchDog_Reload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iwdg_driver.o(i.WatchDog_Reload))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_DectectCLK
</UL>

<P><STRONG><a name="[1ab]"></a>WriteCommand_0108</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.WriteCommand_0108))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_SetStartRow
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_DisplayOn
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>

<P><STRONG><a name="[1ac]"></a>WriteData_0108</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lcd_ks0108_6800_device.o(i.WriteData_0108))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>

<P><STRONG><a name="[93]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[ef]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commdeal_cvte.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBufLength
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Pcs_Send_Service
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Send_Service
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcsComDataIndex_10H
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPCSComDataRange_10H
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Register_Index
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Range_Check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Register_Index
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Range_Check
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Register_Index
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Range_Check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Register_Index
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Range_Check
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Register_Index
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Range_Check
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Parsing_RTU_Frame
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateConnectFinish
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperateNameByOperateCode_Chinese
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode_Chinese
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaResetTx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperateNameByOperateCode
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[81]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[364]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[366]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[9e]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[367]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[a2]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[5f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[36c]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[e1]"></a>bsp_InitCan1</STRONG> (Thumb, 310 bytes, Stack size 128 bytes, can_driver.o(i.bsp_InitCan1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_InitCan1 &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Driver_Initial
</UL>

<P><STRONG><a name="[e2]"></a>bsp_InitCan2</STRONG> (Thumb, 320 bytes, Stack size 128 bytes, can_driver.o(i.bsp_InitCan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_InitCan2 &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Driver_Initial
</UL>

<P><STRONG><a name="[d3]"></a>can1_ReceivePacket</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, can_driver.o(i.can1_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can1_ReceivePacket &rArr; read_Can_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Can_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCan_ReceivePacket
</UL>

<P><STRONG><a name="[d5]"></a>can1_SendPacket</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, can_driver.o(i.can1_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = can1_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCan_SendPacket
</UL>

<P><STRONG><a name="[1c1]"></a>can2_ReceivePacket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, can_driver.o(i.can2_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can2_ReceivePacket &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSCan_ReceivePacket
</UL>

<P><STRONG><a name="[1c2]"></a>can2_SendPacket</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, can_driver.o(i.can2_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = can2_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSCan_SendPacket
</UL>

<P><STRONG><a name="[bb]"></a>checkCalendar</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, bl5372_device.o(i.checkCalendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = checkCalendar
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Set_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Get_Time
</UL>

<P><STRONG><a name="[368]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[374]"></a>generateOperationRecord</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcd_service.o(i.generateOperationRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertOperationRecordQueue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[375]"></a>getBatteryManufacturerItem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getBatteryManufacturerItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getBatteryManufacturerItem &rArr; Flash_Device_BMSInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[376]"></a>getBmsBatteryTypeData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getBmsBatteryTypeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getBmsBatteryTypeData &rArr; Flash_Device_BMSInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[150]"></a>getDisplayHandleCodeByKeyDetection</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, lcd_service.o(i.getDisplayHandleCodeByKeyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getDisplayHandleCodeByKeyDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[1a2]"></a>getDisplayPasswordFromFlash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getDisplayPasswordFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getDisplayPasswordFromFlash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemPasswordVerify
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemLoginVerify
</UL>

<P><STRONG><a name="[377]"></a>getDryNodeData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getDryNodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getDryNodeData &rArr; Flash_Device_GenInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[378]"></a>getDryNodeUseData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getDryNodeUseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getDryNodeUseData &rArr; Flash_Device_GenInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[379]"></a>getFaultNameByFaultCode</STRONG> (Thumb, 3580 bytes, Stack size 16 bytes, lcd_service.o(i.getFaultNameByFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getFaultNameByFaultCode &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_English
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_English
</UL>

<P><STRONG><a name="[37a]"></a>getFaultNameByFaultCode_Chinese</STRONG> (Thumb, 2204 bytes, Stack size 16 bytes, displaychinesetab.o(i.getFaultNameByFaultCode_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getFaultNameByFaultCode_Chinese &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Chinese
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Chinese
</UL>

<P><STRONG><a name="[37b]"></a>getGenParaData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getGenParaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getGenParaData &rArr; Flash_Device_GenInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[37c]"></a>getIntelLoadParaData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getIntelLoadParaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getIntelLoadParaData &rArr; Flash_Device_GenInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[14f]"></a>getKeyDetectionStatus</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, lcd_service.o(i.getKeyDetectionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getKeyDetectionStatus &rArr; Key_Device_GetKeyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Device_GetKeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[37d]"></a>getLeadAcidParasData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getLeadAcidParasData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getLeadAcidParasData &rArr; Flash_Device_BMSInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[37e]"></a>getLiIonParasData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getLiIonParasData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getLiIonParasData &rArr; Flash_Device_BMSInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[37f]"></a>getOperatObjeNameByOperateObjCode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcd_service.o(i.getOperatObjeNameByOperateObjCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getOperatObjeNameByOperateObjCode &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
</UL>

<P><STRONG><a name="[380]"></a>getOperatObjeNameByOperateObjCode_Chinese</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, displaychinesetab.o(i.getOperatObjeNameByOperateObjCode_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getOperatObjeNameByOperateObjCode_Chinese &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
</UL>

<P><STRONG><a name="[381]"></a>getOperateNameByOperateCode</STRONG> (Thumb, 2200 bytes, Stack size 16 bytes, lcd_service.o(i.getOperateNameByOperateCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getOperateNameByOperateCode &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
</UL>

<P><STRONG><a name="[382]"></a>getOperateNameByOperateCode_Chinese</STRONG> (Thumb, 2068 bytes, Stack size 16 bytes, displaychinesetab.o(i.getOperateNameByOperateCode_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getOperateNameByOperateCode_Chinese &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
</UL>

<P><STRONG><a name="[383]"></a>getPowerFactorData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_service.o(i.getPowerFactorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getPowerFactorData &rArr; Flash_Device_GridInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[384]"></a>getRTCTimetoDisplayTime</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lcd_service.o(i.getRTCTimetoDisplayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = getRTCTimetoDisplayTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[385]"></a>getReactPowerControlWayItem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getReactPowerControlWayItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getReactPowerControlWayItem &rArr; Flash_Device_GridInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[386]"></a>getReactPowerData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_service.o(i.getReactPowerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getReactPowerData &rArr; Flash_Device_GridInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[387]"></a>getSafetyRegulationItem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getSafetyRegulationItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSafetyRegulationItem &rArr; Flash_Device_GridInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[388]"></a>getSysteSerialData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_service.o(i.getSysteSerialData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSysteSerialData &rArr; Flash_Device_GridInfo_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[24c]"></a>getSystemLanguageItem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.getSystemLanguageItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSystemLanguageItem
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_LanguageType_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalSysParamToCloudData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLanguageInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[325]"></a>get_SRInfo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sr_virtualdevice.o(i.get_SRInfo))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyRegulationInit
</UL>

<P><STRONG><a name="[36b]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600 + Unknown Stack Size
<LI>Call Chain = main &rArr; MainProcess &rArr; FaultManagement_Handler &rArr; FaultRunning &rArr; EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[112]"></a>sMeterDataUnified</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, modbus_meter_comdata.o(i.sMeterDataUnified))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sMeterDataUnified &rArr; Hex2Float_IEEE745 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Float_IEEE745
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Meter_Receive_Service
</UL>

<P><STRONG><a name="[389]"></a>setBatteryManufacturerItem</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_service.o(i.setBatteryManufacturerItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setBatteryManufacturerItem &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[38a]"></a>setBmsBatteryTypeData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_service.o(i.setBmsBatteryTypeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setBmsBatteryTypeData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[38b]"></a>setDisplayPasswordtToFlash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_service.o(i.setDisplayPasswordtToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setDisplayPasswordtToFlash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[38c]"></a>setDisplayTimetoRTCTime</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lcd_service.o(i.setDisplayTimetoRTCTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = setDisplayTimetoRTCTime &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[38d]"></a>setDryNodeData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_service.o(i.setDryNodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setDryNodeData &rArr; Flash_Device_GenInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[38e]"></a>setDryNodeUseData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_service.o(i.setDryNodeUseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setDryNodeUseData &rArr; Flash_Device_GenInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[38f]"></a>setGenParaData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd_service.o(i.setGenParaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setGenParaData &rArr; Flash_Device_GenInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[390]"></a>setIntelLoadParaData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_service.o(i.setIntelLoadParaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setIntelLoadParaData &rArr; Flash_Device_GenInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GenInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[391]"></a>setLeadAcidCapacityAndMaxCharCurData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd_service.o(i.setLeadAcidCapacityAndMaxCharCurData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setLeadAcidCapacityAndMaxCharCurData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[392]"></a>setLeadAcidEndofSOCData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_service.o(i.setLeadAcidEndofSOCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setLeadAcidEndofSOCData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[393]"></a>setLiIonComWayFlagData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_service.o(i.setLiIonComWayFlagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setLiIonComWayFlagData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[394]"></a>setLiIonEndofSOCData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_service.o(i.setLiIonEndofSOCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setLiIonEndofSOCData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[395]"></a>setLiIonMaxCharCurData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_service.o(i.setLiIonMaxCharCurData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setLiIonMaxCharCurData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[396]"></a>setPowerFactorData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_service.o(i.setPowerFactorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setPowerFactorData &rArr; Flash_Device_GridInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[397]"></a>setReactPowerControlWayItem</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_service.o(i.setReactPowerControlWayItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setReactPowerControlWayItem &rArr; Flash_Device_GridInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[398]"></a>setReactPowerData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_service.o(i.setReactPowerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setReactPowerData &rArr; Flash_Device_GridInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[399]"></a>setSafetyRegulationItem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_service.o(i.setSafetyRegulationItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setSafetyRegulationItem &rArr; Flash_Device_GridInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[21f]"></a>setSystemLanguageItem</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_service.o(i.setSystemLanguageItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setSystemLanguageItem &rArr; Flash_Device_LanguageType_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_LanguageType_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCloudInputSysParamTimeSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[39b]"></a>setSystemSerialData</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lcd_service.o(i.setSystemSerialData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setSystemSerialData &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_GridInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[39c]"></a>setVoltPointData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd_service.o(i.setVoltPointData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setVoltPointData &rArr; Flash_Device_BMSInfo_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_BMSInfo_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[169]"></a>updateDisplayBMSSetData</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBMSSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayBMSSetData &rArr; updateDisplayBMSSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Spanish
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Polish
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Italian
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_German
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_French
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_English
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Dutch
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Czech
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[39e]"></a>updateDisplayBMSSetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayBMSSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBMSSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[3a4]"></a>updateDisplayBMSSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[3a5]"></a>updateDisplayBMSSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[39d]"></a>updateDisplayBMSSetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayBMSSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBMSSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[3a1]"></a>updateDisplayBMSSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[3a0]"></a>updateDisplayBMSSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[3a3]"></a>updateDisplayBMSSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[3a2]"></a>updateDisplayBMSSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[39f]"></a>updateDisplayBMSSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBMSSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBMSSetData
</UL>

<P><STRONG><a name="[192]"></a>updateDisplayBackupPowerSetData</STRONG> (Thumb, 1056 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayBackupPowerSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_Spanish
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_Polish
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_Italian
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_German
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_French
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_English
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_Dutch
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData_Czech
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3ac]"></a>updateDisplayBackupPowerSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3ad]"></a>updateDisplayBackupPowerSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3a6]"></a>updateDisplayBackupPowerSetData_English</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBackupPowerSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3a9]"></a>updateDisplayBackupPowerSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3a8]"></a>updateDisplayBackupPowerSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3ab]"></a>updateDisplayBackupPowerSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3aa]"></a>updateDisplayBackupPowerSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[3a7]"></a>updateDisplayBackupPowerSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBackupPowerSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBackupPowerSetData
</UL>

<P><STRONG><a name="[15b]"></a>updateDisplayBatteryData</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryData &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_Spanish
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_Polish
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_Italian
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_German
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_French
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_English
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_Dutch
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_Czech
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3af]"></a>updateDisplayBatteryData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b5]"></a>updateDisplayBatteryData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b6]"></a>updateDisplayBatteryData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3ae]"></a>updateDisplayBatteryData_English</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, lcd_service.o(i.updateDisplayBatteryData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryData_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b2]"></a>updateDisplayBatteryData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_French))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b1]"></a>updateDisplayBatteryData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_German))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b4]"></a>updateDisplayBatteryData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b3]"></a>updateDisplayBatteryData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[3b0]"></a>updateDisplayBatteryData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryData
</UL>

<P><STRONG><a name="[172]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData</STRONG> (Thumb, 1194 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLeadAcidParaSetEndofSOCData &rArr; updateDisplayBatteryLeadAcidParaSetEndofSOCData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_Spanish
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_Polish
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_Italian
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_German
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_French
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_English
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_Dutch
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_Czech
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData_Chinese
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLeadAcidEndofSOCData
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLeadAcidParasData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3b8]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3be]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3bf]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3b7]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_English</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLeadAcidParaSetEndofSOCData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3bb]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_French))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3ba]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_German))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3bd]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3bc]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3b9]"></a>updateDisplayBatteryLeadAcidParaSetEndofSOCData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLeadAcidParaSetEndofSOCData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLeadAcidParaSetEndofSOCData
</UL>

<P><STRONG><a name="[16d]"></a>updateDisplayBatteryLiIonComWaySetData</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonComWaySetData &rArr; updateDisplayBatteryLiIonComWaySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_Spanish
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_Polish
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_Italian
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_German
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_French
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_English
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_Dutch
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_Czech
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData_Chinese
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonComWayFlagData
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLiIonParasData
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBmsComWayType
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3c2]"></a>updateDisplayBatteryLiIonComWaySetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c8]"></a>updateDisplayBatteryLiIonComWaySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c9]"></a>updateDisplayBatteryLiIonComWaySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c1]"></a>updateDisplayBatteryLiIonComWaySetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonComWaySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c5]"></a>updateDisplayBatteryLiIonComWaySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c4]"></a>updateDisplayBatteryLiIonComWaySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c7]"></a>updateDisplayBatteryLiIonComWaySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c6]"></a>updateDisplayBatteryLiIonComWaySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[3c3]"></a>updateDisplayBatteryLiIonComWaySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonComWaySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonComWaySetData
</UL>

<P><STRONG><a name="[16f]"></a>updateDisplayBatteryLiIonParaSetCurrentData</STRONG> (Thumb, 2006 bytes, Stack size 48 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonParaSetCurrentData &rArr; updateDisplayBatteryLiIonParaSetCurrentData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_Spanish
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_Polish
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_Italian
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_German
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_French
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_English
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_Dutch
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_Czech
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData_Chinese
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonMaxCharCurData
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLiIonParasData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3cc]"></a>updateDisplayBatteryLiIonParaSetCurrentData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3d2]"></a>updateDisplayBatteryLiIonParaSetCurrentData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3d3]"></a>updateDisplayBatteryLiIonParaSetCurrentData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3cb]"></a>updateDisplayBatteryLiIonParaSetCurrentData_English</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonParaSetCurrentData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3cf]"></a>updateDisplayBatteryLiIonParaSetCurrentData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_French))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3ce]"></a>updateDisplayBatteryLiIonParaSetCurrentData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_German))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3d1]"></a>updateDisplayBatteryLiIonParaSetCurrentData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3d0]"></a>updateDisplayBatteryLiIonParaSetCurrentData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[3cd]"></a>updateDisplayBatteryLiIonParaSetCurrentData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetCurrentData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[16b]"></a>updateDisplayBatteryLiIonParaSetData</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonParaSetData &rArr; updateDisplayBatteryLiIonParaSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_Spanish
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_Polish
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_Italian
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_German
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_French
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_English
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_Dutch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_Czech
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3d5]"></a>updateDisplayBatteryLiIonParaSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3db]"></a>updateDisplayBatteryLiIonParaSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3dc]"></a>updateDisplayBatteryLiIonParaSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3d4]"></a>updateDisplayBatteryLiIonParaSetData_English</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonParaSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3d8]"></a>updateDisplayBatteryLiIonParaSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3d7]"></a>updateDisplayBatteryLiIonParaSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3da]"></a>updateDisplayBatteryLiIonParaSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3d9]"></a>updateDisplayBatteryLiIonParaSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[3d6]"></a>updateDisplayBatteryLiIonParaSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetData
</UL>

<P><STRONG><a name="[16e]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData</STRONG> (Thumb, 1194 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonParaSetEndofSOCData &rArr; updateDisplayBatteryLiIonParaSetEndofSOCData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_Spanish
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_Polish
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_Italian
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_German
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_French
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_English
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_Dutch
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_Czech
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData_Chinese
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLiIonEndofSOCData
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLiIonParasData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3de]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3e4]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3e5]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3dd]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_English</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryLiIonParaSetEndofSOCData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3e1]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_French))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3e0]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_German))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3e3]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3e2]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[3df]"></a>updateDisplayBatteryLiIonParaSetEndofSOCData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryLiIonParaSetEndofSOCData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetEndofSOCData
</UL>

<P><STRONG><a name="[16c]"></a>updateDisplayBatteryManufacturerSetData</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryManufacturerSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Spanish
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Polish
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Italian
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_German
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_French
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_English
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Dutch
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Czech
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatteryManufacturerItem
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryManufacturerItem
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData_Chinese
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBmsProtocolType
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3e8]"></a>updateDisplayBatteryManufacturerSetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayBatteryManufacturerSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryManufacturerSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3ee]"></a>updateDisplayBatteryManufacturerSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3ef]"></a>updateDisplayBatteryManufacturerSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3e7]"></a>updateDisplayBatteryManufacturerSetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryManufacturerSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3eb]"></a>updateDisplayBatteryManufacturerSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3ea]"></a>updateDisplayBatteryManufacturerSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3ed]"></a>updateDisplayBatteryManufacturerSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3ec]"></a>updateDisplayBatteryManufacturerSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[3e9]"></a>updateDisplayBatteryManufacturerSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryManufacturerSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryManufacturerSetData
</UL>

<P><STRONG><a name="[16a]"></a>updateDisplayBatteryTypeSetData</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryTypeSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Spanish
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Polish
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Italian
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_German
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_French
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_English
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Dutch
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Czech
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBmsBatteryTypeData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBmsBatteryTypeData
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3f1]"></a>updateDisplayBatteryTypeSetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayBatteryTypeSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryTypeSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f7]"></a>updateDisplayBatteryTypeSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f8]"></a>updateDisplayBatteryTypeSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f0]"></a>updateDisplayBatteryTypeSetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayBatteryTypeSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f4]"></a>updateDisplayBatteryTypeSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f3]"></a>updateDisplayBatteryTypeSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f6]"></a>updateDisplayBatteryTypeSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f5]"></a>updateDisplayBatteryTypeSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[3f2]"></a>updateDisplayBatteryTypeSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayBatteryTypeSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryTypeSetData
</UL>

<P><STRONG><a name="[156]"></a>updateDisplayDETAILEDINFOIndexSetData</STRONG> (Thumb, 398 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayDETAILEDINFOIndexSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayDETAILEDINFOIndexSetData &rArr; updateDisplayDetailedInfoData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_Spanish
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_Polish
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_Italian
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_German
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_French
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_English
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_Dutch
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDetailedInfoData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[3ff]"></a>updateDisplayDetailedInfoData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[400]"></a>updateDisplayDetailedInfoData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[3f9]"></a>updateDisplayDetailedInfoData_English</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayDetailedInfoData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[3fc]"></a>updateDisplayDetailedInfoData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_French))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[3fb]"></a>updateDisplayDetailedInfoData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_German))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[3fe]"></a>updateDisplayDetailedInfoData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[3fd]"></a>updateDisplayDetailedInfoData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[3fa]"></a>updateDisplayDetailedInfoData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayDetailedInfoData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayDETAILEDINFOIndexSetData
</UL>

<P><STRONG><a name="[15e]"></a>updateDisplayFactoryData</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayFactoryData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayFactoryData &rArr; updateDisplayFactoryData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_Spanish
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_Polish
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_Italian
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_German
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_French
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_English
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_Dutch
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_Czech
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[402]"></a>updateDisplayFactoryData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[408]"></a>updateDisplayFactoryData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[409]"></a>updateDisplayFactoryData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[401]"></a>updateDisplayFactoryData_English</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayFactoryData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayFactoryData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[405]"></a>updateDisplayFactoryData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_French))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[404]"></a>updateDisplayFactoryData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_German))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[407]"></a>updateDisplayFactoryData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[406]"></a>updateDisplayFactoryData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[403]"></a>updateDisplayFactoryData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayFactoryData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayFactoryData
</UL>

<P><STRONG><a name="[176]"></a>updateDisplayGenDryRlySelectSetData</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenDryRlySelectSetData &rArr; updateDisplayGenDryRlySelectSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_Spanish
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_Polish
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_Italian
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_German
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_French
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_English
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_Dutch
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_Czech
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData_Chinese
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDryNodeData
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDryNodeData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[40b]"></a>updateDisplayGenDryRlySelectSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[411]"></a>updateDisplayGenDryRlySelectSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[412]"></a>updateDisplayGenDryRlySelectSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[40a]"></a>updateDisplayGenDryRlySelectSetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenDryRlySelectSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[40e]"></a>updateDisplayGenDryRlySelectSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[40d]"></a>updateDisplayGenDryRlySelectSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[410]"></a>updateDisplayGenDryRlySelectSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[40f]"></a>updateDisplayGenDryRlySelectSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[40c]"></a>updateDisplayGenDryRlySelectSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenDryRlySelectSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenDryRlySelectSetData
</UL>

<P><STRONG><a name="[177]"></a>updateDisplayGenPowerParaSetData</STRONG> (Thumb, 1610 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenPowerParaSetData &rArr; updateDisplayGenPowerParaSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_Spanish
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_Polish
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_Italian
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_German
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_French
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_English
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_Dutch
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_Czech
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData_Chinese
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGenParaData
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGenParaData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[414]"></a>updateDisplayGenPowerParaSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[41a]"></a>updateDisplayGenPowerParaSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[41b]"></a>updateDisplayGenPowerParaSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[413]"></a>updateDisplayGenPowerParaSetData_English</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenPowerParaSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[417]"></a>updateDisplayGenPowerParaSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[416]"></a>updateDisplayGenPowerParaSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[419]"></a>updateDisplayGenPowerParaSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[418]"></a>updateDisplayGenPowerParaSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[415]"></a>updateDisplayGenPowerParaSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenPowerParaSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenPowerParaSetData
</UL>

<P><STRONG><a name="[174]"></a>updateDisplayGenSetData</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGenSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenSetData &rArr; updateDisplayGenSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_Spanish
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_Polish
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_Italian
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_German
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_French
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_English
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_Dutch
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_Czech
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[41d]"></a>updateDisplayGenSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[423]"></a>updateDisplayGenSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[424]"></a>updateDisplayGenSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[41c]"></a>updateDisplayGenSetData_English</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGenSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[420]"></a>updateDisplayGenSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[41f]"></a>updateDisplayGenSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[422]"></a>updateDisplayGenSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[421]"></a>updateDisplayGenSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[41e]"></a>updateDisplayGenSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenSetData
</UL>

<P><STRONG><a name="[175]"></a>updateDisplayGenUsageSelectSetData</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGenUsageSelectSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenUsageSelectSetData &rArr; updateDisplayPVControlWaySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Polish
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Italian
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_German
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_French
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_English
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Dutch
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Czech
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData_Spanish
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData_English
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData_Chinese
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDryNodeUseData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDryNodeUseData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[426]"></a>updateDisplayGenUsageSelectSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenUsageSelectSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[425]"></a>updateDisplayGenUsageSelectSetData_English</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGenUsageSelectSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGenUsageSelectSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[427]"></a>updateDisplayGenUsageSelectSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGenUsageSelectSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[15d]"></a>updateDisplayGeneratorData</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGeneratorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayGeneratorData &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_Spanish
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_Polish
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_Italian
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_German
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_French
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_English
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_Dutch
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_Czech
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[430]"></a>updateDisplayGeneratorData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[436]"></a>updateDisplayGeneratorData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[437]"></a>updateDisplayGeneratorData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[42f]"></a>updateDisplayGeneratorData_English</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayGeneratorData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayGeneratorData_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[433]"></a>updateDisplayGeneratorData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_French))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[432]"></a>updateDisplayGeneratorData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_German))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[435]"></a>updateDisplayGeneratorData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[434]"></a>updateDisplayGeneratorData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[431]"></a>updateDisplayGeneratorData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGeneratorData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[159]"></a>updateDisplayGridData</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridData &rArr; updateDisplayGridData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_Spanish
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_Polish
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_Italian
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_German
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_French
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_English
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_Dutch
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_Czech
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[43a]"></a>updateDisplayGridData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[440]"></a>updateDisplayGridData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[441]"></a>updateDisplayGridData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[439]"></a>updateDisplayGridData_English</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayGridData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[43d]"></a>updateDisplayGridData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_French))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[43c]"></a>updateDisplayGridData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_German))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[43f]"></a>updateDisplayGridData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[43e]"></a>updateDisplayGridData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[43b]"></a>updateDisplayGridData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridData
</UL>

<P><STRONG><a name="[17f]"></a>updateDisplayGridPowerFactorSetData</STRONG> (Thumb, 1222 bytes, Stack size 40 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPowerFactorSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Spanish
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Polish
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Italian
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_German
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_French
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_English
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Dutch
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Czech
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerFactorData
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPowerFactorData
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[444]"></a>updateDisplayGridPowerFactorSetData_Chinese</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayGridPowerFactorSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPowerFactorSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[44a]"></a>updateDisplayGridPowerFactorSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[44b]"></a>updateDisplayGridPowerFactorSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[443]"></a>updateDisplayGridPowerFactorSetData_English</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPowerFactorSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[447]"></a>updateDisplayGridPowerFactorSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[446]"></a>updateDisplayGridPowerFactorSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[449]"></a>updateDisplayGridPowerFactorSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[448]"></a>updateDisplayGridPowerFactorSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[445]"></a>updateDisplayGridPowerFactorSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerFactorSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[17d]"></a>updateDisplayGridPowerSettingsData</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPowerSettingsData &rArr; updateDisplayGridPowerSettingsData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingstData_Spanish
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_Polish
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_Italian
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_German
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_French
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_English
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_Dutch
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[452]"></a>updateDisplayGridPowerSettingsData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[453]"></a>updateDisplayGridPowerSettingsData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[44c]"></a>updateDisplayGridPowerSettingsData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPowerSettingsData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[44f]"></a>updateDisplayGridPowerSettingsData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_French))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[44e]"></a>updateDisplayGridPowerSettingsData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_German))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[451]"></a>updateDisplayGridPowerSettingsData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[450]"></a>updateDisplayGridPowerSettingsData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingsData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[44d]"></a>updateDisplayGridPowerSettingstData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPowerSettingstData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerSettingsData
</UL>

<P><STRONG><a name="[180]"></a>updateDisplayGridPriceSetData</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridPriceSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceSetData &rArr; updateDisplayGridPriceSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Spanish
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Polish
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Italian
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_German
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_French
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_English
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Dutch
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Czech
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[455]"></a>updateDisplayGridPriceSetData_Chinese</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayGridPriceSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[45b]"></a>updateDisplayGridPriceSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[45c]"></a>updateDisplayGridPriceSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[454]"></a>updateDisplayGridPriceSetData_English</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[458]"></a>updateDisplayGridPriceSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[457]"></a>updateDisplayGridPriceSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[45a]"></a>updateDisplayGridPriceSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[459]"></a>updateDisplayGridPriceSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[456]"></a>updateDisplayGridPriceSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceSetData
</UL>

<P><STRONG><a name="[181]"></a>updateDisplayGridPriceTPFVSetData</STRONG> (Thumb, 1678 bytes, Stack size 40 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceTPFVSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Spanish
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Polish
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Italian
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_German
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_French
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_English
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Dutch
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Czech
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[45f]"></a>updateDisplayGridPriceTPFVSetData_Chinese</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, displaychinesetab.o(i.updateDisplayGridPriceTPFVSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceTPFVSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[465]"></a>updateDisplayGridPriceTPFVSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[466]"></a>updateDisplayGridPriceTPFVSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[45e]"></a>updateDisplayGridPriceTPFVSetData_English</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceTPFVSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[462]"></a>updateDisplayGridPriceTPFVSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[461]"></a>updateDisplayGridPriceTPFVSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[464]"></a>updateDisplayGridPriceTPFVSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[463]"></a>updateDisplayGridPriceTPFVSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[460]"></a>updateDisplayGridPriceTPFVSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[182]"></a>updateDisplayGridPriceTPFVTimePeriodSetData</STRONG> (Thumb, 7484 bytes, Stack size 48 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceTPFVTimePeriodSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Spanish
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Polish
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Italian
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_German
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_French
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_English
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Dutch
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Czech
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[468]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_Chinese</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, displaychinesetab.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceTPFVTimePeriodSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[46e]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[46f]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[467]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_English</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridPriceTPFVTimePeriodSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[46b]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[46a]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[46d]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[46c]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[469]"></a>updateDisplayGridPriceTPFVTimePeriodSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridPriceTPFVTimePeriodSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVTimePeriodSetData
</UL>

<P><STRONG><a name="[17c]"></a>updateDisplayGridReactPowerControlWaySetData</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridReactPowerControlWaySetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Spanish
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Polish
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Italian
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_German
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_French
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_English
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Dutch
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Czech
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReactPowerControlWayItem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReactPowerControlWayItem
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[471]"></a>updateDisplayGridReactPowerControlWaySetData_Chinese</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayGridReactPowerControlWaySetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridReactPowerControlWaySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[477]"></a>updateDisplayGridReactPowerControlWaySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[478]"></a>updateDisplayGridReactPowerControlWaySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[470]"></a>updateDisplayGridReactPowerControlWaySetData_English</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridReactPowerControlWaySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[474]"></a>updateDisplayGridReactPowerControlWaySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[473]"></a>updateDisplayGridReactPowerControlWaySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[476]"></a>updateDisplayGridReactPowerControlWaySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[475]"></a>updateDisplayGridReactPowerControlWaySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[472]"></a>updateDisplayGridReactPowerControlWaySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactPowerControlWaySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactPowerControlWaySetData
</UL>

<P><STRONG><a name="[17e]"></a>updateDisplayGridReactivePowerSetData</STRONG> (Thumb, 1282 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridReactivePowerSetData &rArr; updateDisplayGridReactivePowerSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Spanish
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Polish
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Italian
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_German
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_French
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_English
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Dutch
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Czech
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReactPowerData
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReactPowerData
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[47a]"></a>updateDisplayGridReactivePowerSetData_Chinese</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayGridReactivePowerSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridReactivePowerSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[480]"></a>updateDisplayGridReactivePowerSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[481]"></a>updateDisplayGridReactivePowerSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[479]"></a>updateDisplayGridReactivePowerSetData_English</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridReactivePowerSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[47d]"></a>updateDisplayGridReactivePowerSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[47c]"></a>updateDisplayGridReactivePowerSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[47f]"></a>updateDisplayGridReactivePowerSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[47e]"></a>updateDisplayGridReactivePowerSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[47b]"></a>updateDisplayGridReactivePowerSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridReactivePowerSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridReactivePowerSetData
</UL>

<P><STRONG><a name="[17b]"></a>updateDisplayGridSRSetData</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridSRSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridSRSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Spanish
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Polish
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Italian
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_German
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_French
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_English
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Dutch
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Czech
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSafetyRegulationItem
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSafetyRegulationItem
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafetyRegulationInit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[483]"></a>updateDisplayGridSRSetData_Chinese</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayGridSRSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridSRSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[489]"></a>updateDisplayGridSRSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[48a]"></a>updateDisplayGridSRSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[482]"></a>updateDisplayGridSRSetData_English</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridSRSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridSRSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[486]"></a>updateDisplayGridSRSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[485]"></a>updateDisplayGridSRSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[488]"></a>updateDisplayGridSRSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[487]"></a>updateDisplayGridSRSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[484]"></a>updateDisplayGridSRSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSRSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSRSetData
</UL>

<P><STRONG><a name="[179]"></a>updateDisplayGridSetData</STRONG> (Thumb, 398 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayGridSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridSetData &rArr; updateDisplayGridSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Spanish
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Polish
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Italian
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_German
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_French
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_English
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Dutch
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Czech
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[48c]"></a>updateDisplayGridSetData_Chinese</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayGridSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = updateDisplayGridSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[492]"></a>updateDisplayGridSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[493]"></a>updateDisplayGridSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[48b]"></a>updateDisplayGridSetData_English</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayGridSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayGridSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[48f]"></a>updateDisplayGridSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[48e]"></a>updateDisplayGridSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[491]"></a>updateDisplayGridSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[490]"></a>updateDisplayGridSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[48d]"></a>updateDisplayGridSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayGridSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridSetData
</UL>

<P><STRONG><a name="[19d]"></a>updateDisplayHistoryFaultData</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayHistoryFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = updateDisplayHistoryFaultData &rArr; updateDisplayHistoryFaultData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Spanish
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Polish
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Italian
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_German
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_French
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_English
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Dutch
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Czech
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData_Chinese
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_HistoryFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[496]"></a>updateDisplayHistoryFaultData_Chinese</STRONG> (Thumb, 314 bytes, Stack size 128 bytes, displaychinesetab.o(i.updateDisplayHistoryFaultData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = updateDisplayHistoryFaultData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode_Chinese
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_HistoryFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[49c]"></a>updateDisplayHistoryFaultData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[49d]"></a>updateDisplayHistoryFaultData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[495]"></a>updateDisplayHistoryFaultData_English</STRONG> (Thumb, 316 bytes, Stack size 136 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = updateDisplayHistoryFaultData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_HistoryFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[499]"></a>updateDisplayHistoryFaultData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_French))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[498]"></a>updateDisplayHistoryFaultData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_German))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[49b]"></a>updateDisplayHistoryFaultData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[49a]"></a>updateDisplayHistoryFaultData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[497]"></a>updateDisplayHistoryFaultData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHistoryFaultData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHistoryFaultData
</UL>

<P><STRONG><a name="[153]"></a>updateDisplayHomeData</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayHomeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = updateDisplayHomeData &rArr; updateDisplayHomeData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Spanish
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Polish
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Italian
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_German
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_French
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_English
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Dutch
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Czech
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[49f]"></a>updateDisplayHomeData_Chinese</STRONG> (Thumb, 3718 bytes, Stack size 32 bytes, displaychinesetab.o(i.updateDisplayHomeData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplayHomeData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a5]"></a>updateDisplayHomeData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a6]"></a>updateDisplayHomeData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[49e]"></a>updateDisplayHomeData_English</STRONG> (Thumb, 3726 bytes, Stack size 32 bytes, lcd_service.o(i.updateDisplayHomeData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplayHomeData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a2]"></a>updateDisplayHomeData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_French))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a1]"></a>updateDisplayHomeData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_German))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a4]"></a>updateDisplayHomeData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a3]"></a>updateDisplayHomeData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[4a0]"></a>updateDisplayHomeData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayHomeData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayHomeData
</UL>

<P><STRONG><a name="[178]"></a>updateDisplayIntelLoadParaSetData</STRONG> (Thumb, 1216 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayIntelLoadParaSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = updateDisplayIntelLoadParaSetData &rArr; updateDisplayIntelLoadSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_Spanish
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_Polish
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_Italian
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_German
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_French
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_English
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_Dutch
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_Czech
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadSetData_Chinese
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIntelLoadParaData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntelLoadParaData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4a8]"></a>updateDisplayIntelLoadSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4ae]"></a>updateDisplayIntelLoadSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4af]"></a>updateDisplayIntelLoadSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4a7]"></a>updateDisplayIntelLoadSetData_English</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayIntelLoadSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4ab]"></a>updateDisplayIntelLoadSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4aa]"></a>updateDisplayIntelLoadSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4ad]"></a>updateDisplayIntelLoadSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4ac]"></a>updateDisplayIntelLoadSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[4a9]"></a>updateDisplayIntelLoadSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayIntelLoadSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayIntelLoadParaSetData
</UL>

<P><STRONG><a name="[171]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData</STRONG> (Thumb, 2852 bytes, Stack size 56 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplayLeadAcidBatteryParaSetCapacityData &rArr; updateDisplayLeadAcidBatteryParaSetCapacityData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_Spanish
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_Polish
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_Italian
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_German
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_French
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_English
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_Dutch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_Czech
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData_Chinese
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLeadAcidCapacityAndMaxCharCurData
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLeadAcidParasData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4b1]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b7]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b8]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b0]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_English</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayLeadAcidBatteryParaSetCapacityData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b4]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_French))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b3]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_German))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b6]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b5]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[4b2]"></a>updateDisplayLeadAcidBatteryParaSetCapacityData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetCapacityData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
</UL>

<P><STRONG><a name="[173]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData</STRONG> (Thumb, 2534 bytes, Stack size 56 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplayLeadAcidBatteryParaSetVoltPointData &rArr; updateDisplayLeadAcidBatteryParaSetVoltPointData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_Spanish
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_Polish
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_Italian
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_German
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_French
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_English
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_Dutch
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_Czech
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData_Chinese
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltPointData
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLeadAcidParasData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4ba]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4c0]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4c1]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4b9]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_English</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayLeadAcidBatteryParaSetVoltPointData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4bd]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_French))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4bc]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_German))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4bf]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4be]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[4bb]"></a>updateDisplayLeadAcidBatteryParaSetVoltPointData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryParaSetVoltPointData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
</UL>

<P><STRONG><a name="[170]"></a>updateDisplayLeadAcidBatteryTypeSetData</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayLeadAcidBatteryTypeSetData &rArr; updateDisplayLeadAcidBatteryTypeSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_Spanish
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_Polish
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_Italian
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_German
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_French
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_English
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_Dutch
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_Czech
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4c3]"></a>updateDisplayLeadAcidBatteryTypeSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c9]"></a>updateDisplayLeadAcidBatteryTypeSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4ca]"></a>updateDisplayLeadAcidBatteryTypeSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c2]"></a>updateDisplayLeadAcidBatteryTypeSetData_English</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayLeadAcidBatteryTypeSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c6]"></a>updateDisplayLeadAcidBatteryTypeSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c5]"></a>updateDisplayLeadAcidBatteryTypeSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c8]"></a>updateDisplayLeadAcidBatteryTypeSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c7]"></a>updateDisplayLeadAcidBatteryTypeSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[4c4]"></a>updateDisplayLeadAcidBatteryTypeSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLeadAcidBatteryTypeSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryTypeSetData
</UL>

<P><STRONG><a name="[15f]"></a>updateDisplayLogData</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayLogData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayLogData &rArr; updateDisplayLogData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_Spanish
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_Polish
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_Italian
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_German
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_French
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_English
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_Dutch
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_Czech
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4cc]"></a>updateDisplayLogData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4d2]"></a>updateDisplayLogData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4d3]"></a>updateDisplayLogData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4cb]"></a>updateDisplayLogData_English</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayLogData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayLogData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4cf]"></a>updateDisplayLogData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_French))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4ce]"></a>updateDisplayLogData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_German))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4d1]"></a>updateDisplayLogData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4d0]"></a>updateDisplayLogData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[4cd]"></a>updateDisplayLogData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLogData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLogData
</UL>

<P><STRONG><a name="[154]"></a>updateDisplayLoginData</STRONG> (Thumb, 1290 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayLoginData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayLoginData &rArr; updateDisplayLoginData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Spanish
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Polish
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Italian
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_German
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_French
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_English
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Dutch
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Czech
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemLoginVerify
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4d5]"></a>updateDisplayLoginData_Chinese</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayLoginData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayLoginData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4db]"></a>updateDisplayLoginData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4dc]"></a>updateDisplayLoginData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4d4]"></a>updateDisplayLoginData_English</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayLoginData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayLoginData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4d8]"></a>updateDisplayLoginData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_French))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4d7]"></a>updateDisplayLoginData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_German))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4da]"></a>updateDisplayLoginData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4d9]"></a>updateDisplayLoginData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[4d6]"></a>updateDisplayLoginData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayLoginData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLoginData
</UL>

<P><STRONG><a name="[158]"></a>updateDisplayMachinData</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayMachinData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = updateDisplayMachinData &rArr; updateDisplayMachin_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_Spanish
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_Polish
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_Italian
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_German
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_French
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_English
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_Dutch
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_Czech
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachin_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4de]"></a>updateDisplayMachin_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4e4]"></a>updateDisplayMachin_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4e5]"></a>updateDisplayMachin_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4dd]"></a>updateDisplayMachin_English</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, lcd_service.o(i.updateDisplayMachin_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = updateDisplayMachin_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4e1]"></a>updateDisplayMachin_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_French))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4e0]"></a>updateDisplayMachin_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_German))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4e3]"></a>updateDisplayMachin_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4e2]"></a>updateDisplayMachin_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[4df]"></a>updateDisplayMachin_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMachin_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMachinData
</UL>

<P><STRONG><a name="[155]"></a>updateDisplayMenuSetData</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayMenuSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayMenuSetData &rArr; updateDisplayMenuSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_Spanish
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_Polish
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_Italian
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_German
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_French
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_English
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_Dutch
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4ec]"></a>updateDisplayMenuSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4ed]"></a>updateDisplayMenuSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4e6]"></a>updateDisplayMenuSetData_English</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayMenuSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayMenuSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4e9]"></a>updateDisplayMenuSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4e8]"></a>updateDisplayMenuSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4eb]"></a>updateDisplayMenuSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4ea]"></a>updateDisplayMenuSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[4e7]"></a>updateDisplayMenuSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayMenuSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayMenuSetData
</UL>

<P><STRONG><a name="[19e]"></a>updateDisplayOperationRecordData</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayOperationRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = updateDisplayOperationRecordData &rArr; updateDisplayOperationRecordData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Spanish
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Polish
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Italian
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_German
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_French
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_English
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Dutch
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Czech
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData_Chinese
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_OperationRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4f0]"></a>updateDisplayOperationRecordData_Chinese</STRONG> (Thumb, 250 bytes, Stack size 104 bytes, displaychinesetab.o(i.updateDisplayOperationRecordData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = updateDisplayOperationRecordData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperateNameByOperateCode_Chinese
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperatObjeNameByOperateObjCode_Chinese
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_OperationRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f6]"></a>updateDisplayOperationRecordData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f7]"></a>updateDisplayOperationRecordData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4ef]"></a>updateDisplayOperationRecordData_English</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, lcd_service.o(i.updateDisplayOperationRecordData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = updateDisplayOperationRecordData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperateNameByOperateCode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOperatObjeNameByOperateObjCode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_OperationRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f3]"></a>updateDisplayOperationRecordData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_French))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f2]"></a>updateDisplayOperationRecordData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_German))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f5]"></a>updateDisplayOperationRecordData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f4]"></a>updateDisplayOperationRecordData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[4f1]"></a>updateDisplayOperationRecordData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayOperationRecordData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayOperationRecordData
</UL>

<P><STRONG><a name="[167]"></a>updateDisplayPVControlWaySetData</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVControlWaySetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Spanish
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Polish
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Italian
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_German
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_French
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_English
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Dutch
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Czech
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4f8]"></a>updateDisplayPVControlWaySetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayPVControlWaySetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVControlWaySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
</UL>

<P><STRONG><a name="[42c]"></a>updateDisplayPVControlWaySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[42d]"></a>updateDisplayPVControlWaySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[42e]"></a>updateDisplayPVControlWaySetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVControlWaySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[429]"></a>updateDisplayPVControlWaySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[428]"></a>updateDisplayPVControlWaySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[42b]"></a>updateDisplayPVControlWaySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[42a]"></a>updateDisplayPVControlWaySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGenUsageSelectSetData
</UL>

<P><STRONG><a name="[4f9]"></a>updateDisplayPVControlWaySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVControlWaySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVControlWaySetData
</UL>

<P><STRONG><a name="[15a]"></a>updateDisplayPVData</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPVData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVData &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_Spanish
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_Polish
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_Italian
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_German
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_French
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_English
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_Dutch
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_Czech
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[4fb]"></a>updateDisplayPVData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[501]"></a>updateDisplayPVData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[502]"></a>updateDisplayPVData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[4fa]"></a>updateDisplayPVData_English</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayPVData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVData_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[4fe]"></a>updateDisplayPVData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_French))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[4fd]"></a>updateDisplayPVData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_German))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[500]"></a>updateDisplayPVData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[4ff]"></a>updateDisplayPVData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[4fc]"></a>updateDisplayPVData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVData
</UL>

<P><STRONG><a name="[166]"></a>updateDisplayPVSetData</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPVSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVSetData &rArr; updateDisplayPVSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Spanish
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Polish
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Italian
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_German
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_French
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_English
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Dutch
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Czech
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[504]"></a>updateDisplayPVSetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayPVSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[50a]"></a>updateDisplayPVSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[50b]"></a>updateDisplayPVSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[503]"></a>updateDisplayPVSetData_English</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayPVSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayPVSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[507]"></a>updateDisplayPVSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[506]"></a>updateDisplayPVSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[509]"></a>updateDisplayPVSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[508]"></a>updateDisplayPVSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[505]"></a>updateDisplayPVSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPVSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPVSetData
</UL>

<P><STRONG><a name="[190]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData</STRONG> (Thumb, 4064 bytes, Stack size 40 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = updateDisplayPeakLoadShiftingPEAKVALLEYSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Spanish
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Polish
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Italian
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_German
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_French
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Dutch
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Czech
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Chinese
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[50d]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[513]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[514]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[50c]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayPeakLoadShiftingPEAKVALLEYSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[510]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[50f]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[512]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[511]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[50e]"></a>updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingPEAKVALLEYSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingPEAKVALLEYSetData
</UL>

<P><STRONG><a name="[18d]"></a>updateDisplayPeakLoadShiftingSetData</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayPeakLoadShiftingSetData &rArr; updateDisplayPeakLoadShiftingSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_Spanish
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_Polish
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_Italian
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_German
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_French
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_English
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_Dutch
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_Czech
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[516]"></a>updateDisplayPeakLoadShiftingSetData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[51c]"></a>updateDisplayPeakLoadShiftingSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[51d]"></a>updateDisplayPeakLoadShiftingSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[515]"></a>updateDisplayPeakLoadShiftingSetData_English</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayPeakLoadShiftingSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[519]"></a>updateDisplayPeakLoadShiftingSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[518]"></a>updateDisplayPeakLoadShiftingSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[51b]"></a>updateDisplayPeakLoadShiftingSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[51a]"></a>updateDisplayPeakLoadShiftingSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[517]"></a>updateDisplayPeakLoadShiftingSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPeakLoadShiftingSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPeakLoadShiftingSetData
</UL>

<P><STRONG><a name="[18c]"></a>updateDisplayPolicySettingsData</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPolicySettingsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayPolicySettingsData &rArr; updateDisplayPolicySettings_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_Spanish
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_Polish
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_Italian
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_German
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_French
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_English
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_Dutch
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_Czech
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettings_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[51f]"></a>updateDisplayPolicySettings_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[525]"></a>updateDisplayPolicySettings_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[526]"></a>updateDisplayPolicySettings_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[51e]"></a>updateDisplayPolicySettings_English</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayPolicySettings_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayPolicySettings_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[522]"></a>updateDisplayPolicySettings_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_French))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[521]"></a>updateDisplayPolicySettings_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_German))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[524]"></a>updateDisplayPolicySettings_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[523]"></a>updateDisplayPolicySettings_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[520]"></a>updateDisplayPolicySettings_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPolicySettings_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPolicySettingsData
</UL>

<P><STRONG><a name="[527]"></a>updateDisplayPowerLoadData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[52d]"></a>updateDisplayPowerLoadData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[52e]"></a>updateDisplayPowerLoadData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[438]"></a>updateDisplayPowerLoadData_English</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayPowerLoadData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayPowerLoadData_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGeneratorData
</UL>

<P><STRONG><a name="[52a]"></a>updateDisplayPowerLoadData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_French))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[529]"></a>updateDisplayPowerLoadData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_German))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[52c]"></a>updateDisplayPowerLoadData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[52b]"></a>updateDisplayPowerLoadData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[528]"></a>updateDisplayPowerLoadData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayPowerLoadData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLodaData
</UL>

<P><STRONG><a name="[15c]"></a>updateDisplayPowerLodaData</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayPowerLodaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayPowerLodaData &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_Spanish
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_Polish
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_Italian
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_German
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_French
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_English
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_Dutch
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_Czech
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayPowerLoadData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[52f]"></a>updateDisplayProtectItemNameSetData</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, lcd_service.o(i.updateDisplayProtectItemNameSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectItemNameSetData &rArr; updateDisplayProtectItemSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Spanish
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Polish
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Italian
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_German
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_French
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_English
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Dutch
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Czech
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData_Chinese
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemSetData
</UL>

<P><STRONG><a name="[531]"></a>updateDisplayProtectItemNameSetData_Chinese</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, displaychinesetab.o(i.updateDisplayProtectItemNameSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectItemNameSetData_Chinese &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[168]"></a>updateDisplayProtectItemSetData</STRONG> (Thumb, 1192 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayProtectItemSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectItemSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[532]"></a>updateDisplayProtectItemSetData_Chinese</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, displaychinesetab.o(i.updateDisplayProtectItemSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectItemSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[538]"></a>updateDisplayProtectItemSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[539]"></a>updateDisplayProtectItemSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[530]"></a>updateDisplayProtectItemSetData_English</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectItemSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[535]"></a>updateDisplayProtectItemSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[534]"></a>updateDisplayProtectItemSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[537]"></a>updateDisplayProtectItemSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[536]"></a>updateDisplayProtectItemSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[533]"></a>updateDisplayProtectItemSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectItemSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectItemNameSetData
</UL>

<P><STRONG><a name="[198]"></a>updateDisplayProtectSetData</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayProtectSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectSetData &rArr; updateDisplayProtectSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Spanish
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Polish
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Italian
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_German
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_French
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_English
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Dutch
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Czech
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[53b]"></a>updateDisplayProtectSetData_Chinese</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayProtectSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[541]"></a>updateDisplayProtectSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[542]"></a>updateDisplayProtectSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[53a]"></a>updateDisplayProtectSetData_English</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayProtectSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayProtectSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[53e]"></a>updateDisplayProtectSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[53d]"></a>updateDisplayProtectSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[540]"></a>updateDisplayProtectSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[53f]"></a>updateDisplayProtectSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[53c]"></a>updateDisplayProtectSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayProtectSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayProtectSetData
</UL>

<P><STRONG><a name="[19c]"></a>updateDisplayRealFaultData</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplayRealFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = updateDisplayRealFaultData &rArr; updateDisplayRealFaultData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Spanish
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Polish
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Italian
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_German
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_French
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_English
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Dutch
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Czech
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData_Chinese
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_RealFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[545]"></a>updateDisplayRealFaultData_Chinese</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, displaychinesetab.o(i.updateDisplayRealFaultData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateDisplayRealFaultData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode_Chinese
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_RealFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[54b]"></a>updateDisplayRealFaultData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[54c]"></a>updateDisplayRealFaultData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[544]"></a>updateDisplayRealFaultData_English</STRONG> (Thumb, 402 bytes, Stack size 104 bytes, lcd_service.o(i.updateDisplayRealFaultData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = updateDisplayRealFaultData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultNameByFaultCode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_RealFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[548]"></a>updateDisplayRealFaultData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_French))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[547]"></a>updateDisplayRealFaultData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_German))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[54a]"></a>updateDisplayRealFaultData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[549]"></a>updateDisplayRealFaultData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[546]"></a>updateDisplayRealFaultData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealFaultData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealFaultData
</UL>

<P><STRONG><a name="[19b]"></a>updateDisplayRealtimeData</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayRealtimeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplayRealtimeData &rArr; updateDisplayRealtimeData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Spanish
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Polish
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Italian
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_German
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_French
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_English
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Dutch
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Czech
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData_Chinese
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayGridGenState
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[54e]"></a>updateDisplayRealtimeData_Chinese</STRONG> (Thumb, 1964 bytes, Stack size 64 bytes, displaychinesetab.o(i.updateDisplayRealtimeData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayRealtimeData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[554]"></a>updateDisplayRealtimeData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[555]"></a>updateDisplayRealtimeData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[54d]"></a>updateDisplayRealtimeData_English</STRONG> (Thumb, 2402 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayRealtimeData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayRealtimeData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[551]"></a>updateDisplayRealtimeData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_French))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[550]"></a>updateDisplayRealtimeData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_German))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[553]"></a>updateDisplayRealtimeData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[552]"></a>updateDisplayRealtimeData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[54f]"></a>updateDisplayRealtimeData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRealtimeData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRealtimeData
</UL>

<P><STRONG><a name="[157]"></a>updateDisplayRunningStatus</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayRunningStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplayRunningStatus &rArr; updateDisplayRunningStatus_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_Spanish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_Polish
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_Italian
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_German
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_French
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_English
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_Dutch
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[55c]"></a>updateDisplayRunningStatus_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[55d]"></a>updateDisplayRunningStatus_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[556]"></a>updateDisplayRunningStatus_English</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayRunningStatus_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayRunningStatus_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[559]"></a>updateDisplayRunningStatus_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_French))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[558]"></a>updateDisplayRunningStatus_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_German))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[55b]"></a>updateDisplayRunningStatus_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[55a]"></a>updateDisplayRunningStatus_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[557]"></a>updateDisplayRunningStatus_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayRunningStatus_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayRunningStatus
</UL>

<P><STRONG><a name="[160]"></a>updateDisplaySettingMenuData</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySettingMenuData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySettingMenuData &rArr; updateDisplaySettingMenuData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_Spanish
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_Polish
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_Italian
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_German
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_French
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_English
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_Dutch
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_Czech
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[55f]"></a>updateDisplaySettingMenuData_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[565]"></a>updateDisplaySettingMenuData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[566]"></a>updateDisplaySettingMenuData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[55e]"></a>updateDisplaySettingMenuData_English</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySettingMenuData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySettingMenuData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[562]"></a>updateDisplaySettingMenuData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_French))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[561]"></a>updateDisplaySettingMenuData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_German))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[564]"></a>updateDisplaySettingMenuData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[563]"></a>updateDisplaySettingMenuData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[560]"></a>updateDisplaySettingMenuData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySettingMenuData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySettingMenuData
</UL>

<P><STRONG><a name="[161]"></a>updateDisplayStatistics</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics &rArr; updateDisplayStatistics_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Spanish
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Polish
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Italian
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_German
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_French
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_English
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Dutch
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Czech
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[199]"></a>updateDisplayStatisticsData</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayStatisticsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatisticsData &rArr; updateDisplayStatisticsData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Spanish
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Polish
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Italian
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_German
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_French
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_English
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Dutch
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Czech
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData_Chinese
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[571]"></a>updateDisplayStatisticsData_Chinese</STRONG> (Thumb, 1730 bytes, Stack size 64 bytes, displaychinesetab.o(i.updateDisplayStatisticsData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatisticsData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[577]"></a>updateDisplayStatisticsData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[578]"></a>updateDisplayStatisticsData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[570]"></a>updateDisplayStatisticsData_English</STRONG> (Thumb, 1448 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayStatisticsData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatisticsData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[574]"></a>updateDisplayStatisticsData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_French))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[573]"></a>updateDisplayStatisticsData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_German))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[576]"></a>updateDisplayStatisticsData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[575]"></a>updateDisplayStatisticsData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[572]"></a>updateDisplayStatisticsData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatisticsData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatisticsData
</UL>

<P><STRONG><a name="[165]"></a>updateDisplayStatistics_All</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayStatistics_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_All &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_Spanish
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_Polish
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_Italian
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_German
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_French
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_English
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_Dutch
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_Czech
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[57a]"></a>updateDisplayStatistics_All_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[580]"></a>updateDisplayStatistics_All_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[581]"></a>updateDisplayStatistics_All_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[579]"></a>updateDisplayStatistics_All_English</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayStatistics_All_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_All_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[57d]"></a>updateDisplayStatistics_All_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_French))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[57c]"></a>updateDisplayStatistics_All_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_German))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[57f]"></a>updateDisplayStatistics_All_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[57e]"></a>updateDisplayStatistics_All_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[57b]"></a>updateDisplayStatistics_All_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_All_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_All
</UL>

<P><STRONG><a name="[568]"></a>updateDisplayStatistics_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[56e]"></a>updateDisplayStatistics_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[162]"></a>updateDisplayStatistics_Day</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayStatistics_Day))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_Day &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_Spanish
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_Polish
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_Italian
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_German
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_French
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_English
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_Dutch
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_Czech
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[583]"></a>updateDisplayStatistics_Day_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[589]"></a>updateDisplayStatistics_Day_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[58a]"></a>updateDisplayStatistics_Day_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[582]"></a>updateDisplayStatistics_Day_English</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayStatistics_Day_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_Day_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[586]"></a>updateDisplayStatistics_Day_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_French))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[585]"></a>updateDisplayStatistics_Day_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_German))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[588]"></a>updateDisplayStatistics_Day_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[587]"></a>updateDisplayStatistics_Day_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[584]"></a>updateDisplayStatistics_Day_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Day_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Day
</UL>

<P><STRONG><a name="[56f]"></a>updateDisplayStatistics_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[567]"></a>updateDisplayStatistics_English</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayStatistics_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[56b]"></a>updateDisplayStatistics_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_French))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[56a]"></a>updateDisplayStatistics_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_German))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[56d]"></a>updateDisplayStatistics_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[163]"></a>updateDisplayStatistics_Month</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayStatistics_Month))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_Month &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_Spanish
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_Polish
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_Italian
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_German
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_French
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_English
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_Dutch
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_Czech
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[58c]"></a>updateDisplayStatistics_Month_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[592]"></a>updateDisplayStatistics_Month_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[593]"></a>updateDisplayStatistics_Month_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[58b]"></a>updateDisplayStatistics_Month_English</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayStatistics_Month_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_Month_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[58f]"></a>updateDisplayStatistics_Month_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_French))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[58e]"></a>updateDisplayStatistics_Month_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_German))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[591]"></a>updateDisplayStatistics_Month_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[590]"></a>updateDisplayStatistics_Month_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[58d]"></a>updateDisplayStatistics_Month_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Month_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Month
</UL>

<P><STRONG><a name="[56c]"></a>updateDisplayStatistics_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[569]"></a>updateDisplayStatistics_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics
</UL>

<P><STRONG><a name="[164]"></a>updateDisplayStatistics_Year</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplayStatistics_Year))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_Year &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_Polish
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_Italian
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_German
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_French
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_English
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_Dutch
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_Czech
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_Chinese
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year_Spanish
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[595]"></a>updateDisplayStatistics_Year_Chinese</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_Chinese))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[59b]"></a>updateDisplayStatistics_Year_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[59c]"></a>updateDisplayStatistics_Year_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[594]"></a>updateDisplayStatistics_Year_English</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, lcd_service.o(i.updateDisplayStatistics_Year_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = updateDisplayStatistics_Year_English &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[598]"></a>updateDisplayStatistics_Year_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_French))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[597]"></a>updateDisplayStatistics_Year_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_German))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[59a]"></a>updateDisplayStatistics_Year_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[599]"></a>updateDisplayStatistics_Year_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[596]"></a>updateDisplayStatistics_Year_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayStatistics_Year_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayStatistics_Year
</UL>

<P><STRONG><a name="[187]"></a>updateDisplaySystemClearFaultData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemClearFaultData))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[188]"></a>updateDisplaySystemClearRecordData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemClearRecordData))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[18a]"></a>updateDisplaySystemCommResetData</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemCommResetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemCommResetData &rArr; updateDisplaySystemCommResetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Chinese
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Spanish
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Polish
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Italian
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_German
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_French
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_English
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Dutch
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[59e]"></a>updateDisplaySystemCommResetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemCommResetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemCommResetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[5a4]"></a>updateDisplaySystemCommResetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[5a5]"></a>updateDisplaySystemCommResetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[59d]"></a>updateDisplaySystemCommResetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemCommResetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[5a1]"></a>updateDisplaySystemCommResetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[5a0]"></a>updateDisplaySystemCommResetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[5a3]"></a>updateDisplaySystemCommResetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[5a2]"></a>updateDisplaySystemCommResetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[59f]"></a>updateDisplaySystemCommResetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemCommResetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemCommResetData
</UL>

<P><STRONG><a name="[1a0]"></a>updateDisplaySystemConfirm</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemConfirm &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSoftwareReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_SystemStatistical
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Chinese
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_RestoreFactorySetData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_OperationRecordData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_HistoryFaultData
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Spanish
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Polish
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Italian
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_German
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_French
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_English
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Dutch
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[5a8]"></a>updateDisplaySystemConfirm_Chinese</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemConfirm_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemConfirm_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5ae]"></a>updateDisplaySystemConfirm_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5af]"></a>updateDisplaySystemConfirm_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5a7]"></a>updateDisplaySystemConfirm_English</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemConfirm_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemConfirm_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5ab]"></a>updateDisplaySystemConfirm_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_French))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5aa]"></a>updateDisplaySystemConfirm_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_German))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5ad]"></a>updateDisplaySystemConfirm_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5ac]"></a>updateDisplaySystemConfirm_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[5a9]"></a>updateDisplaySystemConfirm_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemConfirm_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemConfirm
</UL>

<P><STRONG><a name="[19a]"></a>updateDisplaySystemData</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemData))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemData &rArr; updateDisplaySystemData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Chinese
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Spanish
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Polish
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Italian
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_German
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_French
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_English
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Dutch
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[5b1]"></a>updateDisplaySystemData_Chinese</STRONG> (Thumb, 586 bytes, Stack size 88 bytes, displaychinesetab.o(i.updateDisplaySystemData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySoftwareVersion
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b7]"></a>updateDisplaySystemData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b8]"></a>updateDisplaySystemData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b0]"></a>updateDisplaySystemData_English</STRONG> (Thumb, 588 bytes, Stack size 88 bytes, lcd_service.o(i.updateDisplaySystemData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySoftwareVersion
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b4]"></a>updateDisplaySystemData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_French))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b3]"></a>updateDisplaySystemData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_German))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b6]"></a>updateDisplaySystemData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b5]"></a>updateDisplaySystemData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[5b2]"></a>updateDisplaySystemData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemData
</UL>

<P><STRONG><a name="[189]"></a>updateDisplaySystemFactorySetData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemFactorySetData))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[193]"></a>updateDisplaySystemGenStrategySetData</STRONG> (Thumb, 1222 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemGenStrategySetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Spanish
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Polish
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Italian
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_German
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_French
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_English
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Dutch
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[5ba]"></a>updateDisplaySystemGenStrategySetData_Chinese</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, displaychinesetab.o(i.updateDisplaySystemGenStrategySetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemGenStrategySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5c0]"></a>updateDisplaySystemGenStrategySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5c1]"></a>updateDisplaySystemGenStrategySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5b9]"></a>updateDisplaySystemGenStrategySetData_English</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemGenStrategySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5bd]"></a>updateDisplaySystemGenStrategySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5bc]"></a>updateDisplaySystemGenStrategySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5bf]"></a>updateDisplaySystemGenStrategySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5be]"></a>updateDisplaySystemGenStrategySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[5bb]"></a>updateDisplaySystemGenStrategySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemGenStrategySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemGenStrategySetData
</UL>

<P><STRONG><a name="[197]"></a>updateDisplaySystemInsulationDetetionData</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemInsulationDetetionData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Chinese
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Spanish
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Polish
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Italian
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_German
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_French
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_English
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Dutch
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[5c3]"></a>updateDisplaySystemInsulationDetetionData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemInsulationDetetionData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemInsulationDetetionData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c9]"></a>updateDisplaySystemInsulationDetetionData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5ca]"></a>updateDisplaySystemInsulationDetetionData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c2]"></a>updateDisplaySystemInsulationDetetionData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemInsulationDetetionData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c6]"></a>updateDisplaySystemInsulationDetetionData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_French))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c5]"></a>updateDisplaySystemInsulationDetetionData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_German))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c8]"></a>updateDisplaySystemInsulationDetetionData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c7]"></a>updateDisplaySystemInsulationDetetionData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[5c4]"></a>updateDisplaySystemInsulationDetetionData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemInsulationDetetionData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemInsulationDetetionData
</UL>

<P><STRONG><a name="[184]"></a>updateDisplaySystemLanguageSetData</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemLanguageItem
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemLanguageItem
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Chinese
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRowSize
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Spanish
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Polish
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Italian
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_German
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_French
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_English
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Dutch
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[5cc]"></a>updateDisplaySystemLanguageSetData_Chinese</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemLanguageSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5d2]"></a>updateDisplaySystemLanguageSetData_Czech</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_Czech))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_Czech &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5d3]"></a>updateDisplaySystemLanguageSetData_Dutch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_Dutch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_Dutch &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5cb]"></a>updateDisplaySystemLanguageSetData_English</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5cf]"></a>updateDisplaySystemLanguageSetData_French</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_French))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_French &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5ce]"></a>updateDisplaySystemLanguageSetData_German</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_German))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_German &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5d1]"></a>updateDisplaySystemLanguageSetData_Italian</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_Italian))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_Italian &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5d0]"></a>updateDisplaySystemLanguageSetData_Polish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_Polish))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_Polish &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[5cd]"></a>updateDisplaySystemLanguageSetData_Spanish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemLanguageSetData_Spanish))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemLanguageSetData_Spanish &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemLanguageSetData
</UL>

<P><STRONG><a name="[186]"></a>updateDisplaySystemPasswordSetData</STRONG> (Thumb, 2364 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemPasswordSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayPasswordtToFlash
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemPasswordVerify
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Spanish
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Polish
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Italian
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_German
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_French
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_English
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Dutch
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[5d5]"></a>updateDisplaySystemPasswordSetData_Chinese</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, displaychinesetab.o(i.updateDisplaySystemPasswordSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemPasswordSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5db]"></a>updateDisplaySystemPasswordSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5dc]"></a>updateDisplaySystemPasswordSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5d4]"></a>updateDisplaySystemPasswordSetData_English</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemPasswordSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5d8]"></a>updateDisplaySystemPasswordSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5d7]"></a>updateDisplaySystemPasswordSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5da]"></a>updateDisplaySystemPasswordSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5d9]"></a>updateDisplaySystemPasswordSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[5d6]"></a>updateDisplaySystemPasswordSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemPasswordSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPasswordSetData
</UL>

<P><STRONG><a name="[19f]"></a>updateDisplaySystemPrompt</STRONG> (Thumb, 894 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemPrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemPrompt &rArr; updateDisplayTipSetPassed_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Chinese
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Chinese
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Chinese
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Chinese
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Chinese
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Chinese
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Spanish
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Polish
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Italian
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_German
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_French
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_English
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Dutch
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipSetPassed_Czech
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Spanish
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Polish
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Italian
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_German
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_French
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_English
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Dutch
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipPasswordShort_Czech
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Spanish
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Polish
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Italian
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_German
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_French
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_English
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Dutch
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordOverlaps_Czech
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Spanish
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Polish
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Italian
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_German
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_French
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_English
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Dutch
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordNotMatch_Czech
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Spanish
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Polish
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Italian
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_German
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_French
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_English
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Dutch
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipOldPasswordError_Czech
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Spanish
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Polish
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Italian
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_German
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_French
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_English
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Dutch
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayTipLoginError_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[194]"></a>updateDisplaySystemRegularStrategyAbstractSetData</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategyAbstractSetData &rArr; updateDisplaySystemRegularStrategyAbstractSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Chinese
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Spanish
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Polish
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Italian
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_German
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_French
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_English
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Dutch
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[614]"></a>updateDisplaySystemRegularStrategyAbstractSetData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemRegularStrategyAbstractSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategyAbstractSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[61a]"></a>updateDisplaySystemRegularStrategyAbstractSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[61b]"></a>updateDisplaySystemRegularStrategyAbstractSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[613]"></a>updateDisplaySystemRegularStrategyAbstractSetData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategyAbstractSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[617]"></a>updateDisplaySystemRegularStrategyAbstractSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[616]"></a>updateDisplaySystemRegularStrategyAbstractSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[619]"></a>updateDisplaySystemRegularStrategyAbstractSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[618]"></a>updateDisplaySystemRegularStrategyAbstractSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[615]"></a>updateDisplaySystemRegularStrategyAbstractSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyAbstractSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyAbstractSetData
</UL>

<P><STRONG><a name="[196]"></a>updateDisplaySystemRegularStrategyPeriodSetData</STRONG> (Thumb, 7252 bytes, Stack size 48 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Spanish
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Polish
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Italian
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_German
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_French
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_English
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Dutch
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[61d]"></a>updateDisplaySystemRegularStrategyPeriodSetData_Chinese</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, displaychinesetab.o(i.updateDisplaySystemRegularStrategyPeriodSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[623]"></a>updateDisplaySystemRegularStrategyPeriodSetData_Czech</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_Czech))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[624]"></a>updateDisplaySystemRegularStrategyPeriodSetData_Dutch</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_Dutch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_Dutch
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[61c]"></a>updateDisplaySystemRegularStrategyPeriodSetData_English</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[620]"></a>updateDisplaySystemRegularStrategyPeriodSetData_French</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_French))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_French
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[61f]"></a>updateDisplaySystemRegularStrategyPeriodSetData_German</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_German))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_German
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[622]"></a>updateDisplaySystemRegularStrategyPeriodSetData_Italian</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_Italian))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_Italian
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[621]"></a>updateDisplaySystemRegularStrategyPeriodSetData_Polish</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_Polish))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_Polish
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[61e]"></a>updateDisplaySystemRegularStrategyPeriodSetData_Spanish</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategyPeriodSetData_Spanish))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateDisplaySystemRegularStrategyPeriodSetData_Spanish
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategyPeriodSetData
</UL>

<P><STRONG><a name="[195]"></a>updateDisplaySystemRegularStrategySetData</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategySetData &rArr; updateDisplaySystemRegularStrategySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Chinese
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Spanish
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Polish
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Italian
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_German
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_French
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_English
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Dutch
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[626]"></a>updateDisplaySystemRegularStrategySetData_Chinese</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, displaychinesetab.o(i.updateDisplaySystemRegularStrategySetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[62c]"></a>updateDisplaySystemRegularStrategySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[62d]"></a>updateDisplaySystemRegularStrategySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[625]"></a>updateDisplaySystemRegularStrategySetData_English</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRegularStrategySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[629]"></a>updateDisplaySystemRegularStrategySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[628]"></a>updateDisplaySystemRegularStrategySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[62b]"></a>updateDisplaySystemRegularStrategySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[62a]"></a>updateDisplaySystemRegularStrategySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[627]"></a>updateDisplaySystemRegularStrategySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRegularStrategySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRegularStrategySetData
</UL>

<P><STRONG><a name="[18b]"></a>updateDisplaySystemRemoteControlData</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRemoteControlData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Chinese
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Spanish
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Polish
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Italian
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_German
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_French
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_English
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Dutch
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[62f]"></a>updateDisplaySystemRemoteControlData_Chinese</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemRemoteControlData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRemoteControlData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[635]"></a>updateDisplaySystemRemoteControlData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[636]"></a>updateDisplaySystemRemoteControlData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[62e]"></a>updateDisplaySystemRemoteControlData_English</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemRemoteControlData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[632]"></a>updateDisplaySystemRemoteControlData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_French))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[631]"></a>updateDisplaySystemRemoteControlData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_German))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[634]"></a>updateDisplaySystemRemoteControlData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[633]"></a>updateDisplaySystemRemoteControlData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[630]"></a>updateDisplaySystemRemoteControlData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemRemoteControlData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemRemoteControlData
</UL>

<P><STRONG><a name="[191]"></a>updateDisplaySystemSelfStrategySetData</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSelfStrategySetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Chinese
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Spanish
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Polish
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Italian
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_German
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_French
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_English
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Dutch
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[638]"></a>updateDisplaySystemSelfStrategySetData_Chinese</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemSelfStrategySetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSelfStrategySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[63e]"></a>updateDisplaySystemSelfStrategySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[63f]"></a>updateDisplaySystemSelfStrategySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[637]"></a>updateDisplaySystemSelfStrategySetData_English</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSelfStrategySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[63b]"></a>updateDisplaySystemSelfStrategySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[63a]"></a>updateDisplaySystemSelfStrategySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[63d]"></a>updateDisplaySystemSelfStrategySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[63c]"></a>updateDisplaySystemSelfStrategySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[639]"></a>updateDisplaySystemSelfStrategySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSelfStrategySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSelfStrategySetData
</UL>

<P><STRONG><a name="[17a]"></a>updateDisplaySystemSerialSetData</STRONG> (Thumb, 1562 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSerialSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemSerialData
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysteSerialData
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Spanish
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Polish
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Italian
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_German
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_French
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_English
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Dutch
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[641]"></a>updateDisplaySystemSerialSetData_Chinese</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, displaychinesetab.o(i.updateDisplaySystemSerialSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSerialSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[647]"></a>updateDisplaySystemSerialSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[648]"></a>updateDisplaySystemSerialSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[640]"></a>updateDisplaySystemSerialSetData_English</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSerialSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[644]"></a>updateDisplaySystemSerialSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[643]"></a>updateDisplaySystemSerialSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[646]"></a>updateDisplaySystemSerialSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[645]"></a>updateDisplaySystemSerialSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[642]"></a>updateDisplaySystemSerialSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSerialSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSerialSetData
</UL>

<P><STRONG><a name="[183]"></a>updateDisplaySystemSetData</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSetData &rArr; updateDisplaySystemSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Chinese
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Spanish
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Polish
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Italian
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_German
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_French
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_English
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Dutch
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[64a]"></a>updateDisplaySystemSetData_Chinese</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplaySystemSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[650]"></a>updateDisplaySystemSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[651]"></a>updateDisplaySystemSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[649]"></a>updateDisplaySystemSetData_English</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplaySystemSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[64d]"></a>updateDisplaySystemSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[64c]"></a>updateDisplaySystemSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[64f]"></a>updateDisplaySystemSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[64e]"></a>updateDisplaySystemSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[64b]"></a>updateDisplaySystemSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemSetData
</UL>

<P><STRONG><a name="[18f]"></a>updateDisplaySystemTPFVStrategyPeriodSetData</STRONG> (Thumb, 2520 bytes, Stack size 40 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTPFVStrategyPeriodSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Spanish
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Polish
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Italian
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_German
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_French
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_English
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Dutch
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[653]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_Chinese</STRONG> (Thumb, 3434 bytes, Stack size 80 bytes, displaychinesetab.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTPFVStrategyPeriodSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[659]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[65a]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[652]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_English</STRONG> (Thumb, 3010 bytes, Stack size 80 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTPFVStrategyPeriodSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[656]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[655]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[658]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[657]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[654]"></a>updateDisplaySystemTPFVStrategyPeriodSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategyPeriodSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategyPeriodSetData
</UL>

<P><STRONG><a name="[18e]"></a>updateDisplaySystemTPFVStrategySetData</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTPFVStrategySetData &rArr; updateDisplaySystemTPFVStrategySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Chinese
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Spanish
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Polish
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Italian
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_German
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_French
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_English
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Dutch
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[65c]"></a>updateDisplaySystemTPFVStrategySetData_Chinese</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, displaychinesetab.o(i.updateDisplaySystemTPFVStrategySetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTPFVStrategySetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[662]"></a>updateDisplaySystemTPFVStrategySetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[663]"></a>updateDisplaySystemTPFVStrategySetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[65b]"></a>updateDisplaySystemTPFVStrategySetData_English</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTPFVStrategySetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[65f]"></a>updateDisplaySystemTPFVStrategySetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[65e]"></a>updateDisplaySystemTPFVStrategySetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[661]"></a>updateDisplaySystemTPFVStrategySetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[660]"></a>updateDisplaySystemTPFVStrategySetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[65d]"></a>updateDisplaySystemTPFVStrategySetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTPFVStrategySetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTPFVStrategySetData
</UL>

<P><STRONG><a name="[185]"></a>updateDisplaySystemTimeSetData</STRONG> (Thumb, 2180 bytes, Stack size 16 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTimeSetData &rArr; generateOperationRecord &rArr; InsertOperationRecordQueue &rArr; Flash_Device_OperateRecord_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayTimetoRTCTime
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTCTimetoDisplayTime
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateOperationRecord
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Chinese
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_UnderLine_Blink_Position
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Spanish
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Polish
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Italian
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_German
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_French
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_English
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Dutch
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData_Czech
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRunning
</UL>

<P><STRONG><a name="[665]"></a>updateDisplaySystemTimeSetData_Chinese</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, displaychinesetab.o(i.updateDisplaySystemTimeSetData_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTimeSetData_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[66b]"></a>updateDisplaySystemTimeSetData_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[66c]"></a>updateDisplaySystemTimeSetData_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[664]"></a>updateDisplaySystemTimeSetData_English</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateDisplaySystemTimeSetData_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[668]"></a>updateDisplaySystemTimeSetData_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_French))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[667]"></a>updateDisplaySystemTimeSetData_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_German))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[66a]"></a>updateDisplaySystemTimeSetData_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[669]"></a>updateDisplaySystemTimeSetData_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[666]"></a>updateDisplaySystemTimeSetData_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplaySystemTimeSetData_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemTimeSetData
</UL>

<P><STRONG><a name="[602]"></a>updateDisplayTipLoginError_Chinese</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayTipLoginError_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipLoginError_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[608]"></a>updateDisplayTipLoginError_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[609]"></a>updateDisplayTipLoginError_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[601]"></a>updateDisplayTipLoginError_English</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayTipLoginError_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipLoginError_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[605]"></a>updateDisplayTipLoginError_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_French))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[604]"></a>updateDisplayTipLoginError_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_German))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[607]"></a>updateDisplayTipLoginError_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[606]"></a>updateDisplayTipLoginError_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[603]"></a>updateDisplayTipLoginError_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipLoginError_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e7]"></a>updateDisplayTipOldPasswordError_Chinese</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayTipOldPasswordError_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipOldPasswordError_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5ed]"></a>updateDisplayTipOldPasswordError_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5ee]"></a>updateDisplayTipOldPasswordError_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e6]"></a>updateDisplayTipOldPasswordError_English</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipOldPasswordError_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5ea]"></a>updateDisplayTipOldPasswordError_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_French))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e9]"></a>updateDisplayTipOldPasswordError_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_German))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5ec]"></a>updateDisplayTipOldPasswordError_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5eb]"></a>updateDisplayTipOldPasswordError_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e8]"></a>updateDisplayTipOldPasswordError_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordError_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f0]"></a>updateDisplayTipOldPasswordNotMatch_Chinese</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayTipOldPasswordNotMatch_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipOldPasswordNotMatch_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f6]"></a>updateDisplayTipOldPasswordNotMatch_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f7]"></a>updateDisplayTipOldPasswordNotMatch_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5ef]"></a>updateDisplayTipOldPasswordNotMatch_English</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipOldPasswordNotMatch_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f3]"></a>updateDisplayTipOldPasswordNotMatch_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_French))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f2]"></a>updateDisplayTipOldPasswordNotMatch_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_German))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f5]"></a>updateDisplayTipOldPasswordNotMatch_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f4]"></a>updateDisplayTipOldPasswordNotMatch_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f1]"></a>updateDisplayTipOldPasswordNotMatch_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordNotMatch_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f9]"></a>updateDisplayTipOldPasswordOverlaps_Chinese</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayTipOldPasswordOverlaps_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipOldPasswordOverlaps_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5ff]"></a>updateDisplayTipOldPasswordOverlaps_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[600]"></a>updateDisplayTipOldPasswordOverlaps_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5f8]"></a>updateDisplayTipOldPasswordOverlaps_English</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipOldPasswordOverlaps_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5fc]"></a>updateDisplayTipOldPasswordOverlaps_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_French))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5fb]"></a>updateDisplayTipOldPasswordOverlaps_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_German))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5fe]"></a>updateDisplayTipOldPasswordOverlaps_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5fd]"></a>updateDisplayTipOldPasswordOverlaps_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5fa]"></a>updateDisplayTipOldPasswordOverlaps_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipOldPasswordOverlaps_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5de]"></a>updateDisplayTipPasswordShort_Chinese</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayTipPasswordShort_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipPasswordShort_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e4]"></a>updateDisplayTipPasswordShort_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e5]"></a>updateDisplayTipPasswordShort_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5dd]"></a>updateDisplayTipPasswordShort_English</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipPasswordShort_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e1]"></a>updateDisplayTipPasswordShort_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_French))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e0]"></a>updateDisplayTipPasswordShort_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_German))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e3]"></a>updateDisplayTipPasswordShort_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5e2]"></a>updateDisplayTipPasswordShort_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[5df]"></a>updateDisplayTipPasswordShort_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipPasswordShort_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[60b]"></a>updateDisplayTipSetPassed_Chinese</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, displaychinesetab.o(i.updateDisplayTipSetPassed_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipSetPassed_Chinese &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[611]"></a>updateDisplayTipSetPassed_Czech</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_Czech))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[612]"></a>updateDisplayTipSetPassed_Dutch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_Dutch))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[60a]"></a>updateDisplayTipSetPassed_English</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_service.o(i.updateDisplayTipSetPassed_English))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = updateDisplayTipSetPassed_English &rArr; GUI_Display &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[60e]"></a>updateDisplayTipSetPassed_French</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_French))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[60d]"></a>updateDisplayTipSetPassed_German</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_German))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[610]"></a>updateDisplayTipSetPassed_Italian</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_Italian))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[60f]"></a>updateDisplayTipSetPassed_Polish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_Polish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[60c]"></a>updateDisplayTipSetPassed_Spanish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_service.o(i.updateDisplayTipSetPassed_Spanish))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplaySystemPrompt
</UL>

<P><STRONG><a name="[49]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[33]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[369]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[66e]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[36a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
</UL>

<P><STRONG><a name="[66f]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[3ca]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetVoltPointData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayLeadAcidBatteryParaSetCapacityData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPriceTPFVSetData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayBatteryLiIonParaSetCurrentData
</UL>

<P><STRONG><a name="[6b7]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[442]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplayGridPowerFactorSetData
</UL>

<P><STRONG><a name="[670]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[3e]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[87]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[9d]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9c]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2fb]"></a>MainProcess</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, main.o(i.MainProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600 + Unknown Stack Size
<LI>Call Chain = MainProcess &rArr; FaultManagement_Handler &rArr; FaultRunning &rArr; EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Initial
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Handler
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_ReadData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_Handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticsManagement_Handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_DRM_ADC_Handler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_InitSystemDriver
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationManagement_Handler
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_SetCLK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_DectectCLK
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVar_InitModules
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultManagement_Handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyManagement_Handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToWifiGprsCommunicateHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommunicateHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommunicateHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToEmsCanCommunicateHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToDebugCommunicateHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommunicateHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCanCommunicateHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBluetoothCommunicateHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryProtect_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[309]"></a>LL_DMA_EnableIT_TC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcu.o(i.LL_DMA_EnableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_EnableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
</UL>

<P><STRONG><a name="[11f]"></a>LL_DMA_IsEnabledIT_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mcu.o(i.LL_DMA_IsEnabledIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_IsEnabledIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler
</UL>

<P><STRONG><a name="[362]"></a>LL_USART_ClearFlag_IDLE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu.o(i.LL_USART_ClearFlag_IDLE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_4_5_6_LPUART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_LPUART2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2b3]"></a>LL_USART_EnableIT_IDLE</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mcu.o(i.LL_USART_EnableIT_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_EnableIT_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
</UL>

<P><STRONG><a name="[361]"></a>LL_USART_IsActiveFlag_IDLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu.o(i.LL_USART_IsActiveFlag_IDLE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_4_5_6_LPUART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_LPUART2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[360]"></a>LL_USART_IsEnabledIT_IDLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu.o(i.LL_USART_IsEnabledIT_IDLE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_4_5_6_LPUART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_LPUART2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[30a]"></a>NVIC_EncodePriority</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, mcu.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
</UL>

<P><STRONG><a name="[308]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
</UL>

<P><STRONG><a name="[307]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mcu.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
</UL>

<P><STRONG><a name="[2b4]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initial
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_IDLE
</UL>

<P><STRONG><a name="[280]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b3]"></a>AdjustParamInit</STRONG> (Thumb, 48 bytes, Stack size 128 bytes, commdeal_cvte.o(i.AdjustParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AdjustParamInit &rArr; Flash_Device_SampleAdjData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_SampleAdjData_Read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommInit
</UL>

<P><STRONG><a name="[1cb]"></a>Comm2Bluetooth_Receive_Service</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.Comm2Bluetooth_Receive_Service))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBluetoothCommunicateHandler
</UL>

<P><STRONG><a name="[1ca]"></a>Comm2Bluetooth_Send_Service</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.Comm2Bluetooth_Send_Service))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBluetoothCommunicateHandler
</UL>

<P><STRONG><a name="[fb]"></a>Comm2BmsCan_Receive_Service</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2BmsCan_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Comm2BmsCan_Receive_Service &rArr; BMSCan_ReceivePacket &rArr; can1_ReceivePacket &rArr; read_Can_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCan_ReceivePacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCanCommunicateHandler
</UL>

<P><STRONG><a name="[fc]"></a>Comm2BmsCan_Send_Service</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2BmsCan_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Comm2BmsCan_Send_Service &rArr; BMSCan_SendPacket &rArr; can1_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCan_SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCanCommunicateHandler
</UL>

<P><STRONG><a name="[fd]"></a>Comm2Bms_ATE_Receive_Service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Bms_ATE_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Comm2Bms_ATE_Receive_Service &rArr; MB_Slave_Receive_RTU_Frame &rArr; MB_Slave_Parsing_RTU_Frame &rArr; MB_PCS_Slave_Parsing_RTU_Frame &rArr; SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommunicateHandler
</UL>

<P><STRONG><a name="[ff]"></a>Comm2Bms_ATE_Send_Service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Bms_ATE_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Comm2Bms_ATE_Send_Service &rArr; MB_Slave_Response_RTU_Frame &rArr; MB_PCS_Slave_Response_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommunicateHandler
</UL>

<P><STRONG><a name="[101]"></a>Comm2Bms_Receive_Service</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Bms_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Comm2Bms_Receive_Service &rArr; MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_ASCII_Frame
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommunicateHandler
</UL>

<P><STRONG><a name="[105]"></a>Comm2Bms_Send_Service</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Bms_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Comm2Bms_Send_Service &rArr; MB_Master_Send_RTU_Cvte_Frame &rArr; MB_Master_Transmit_RTU_Frame &rArr; MB_RTU_10H_Register_Index &rArr; GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Send_RTU_Cvte_Frame
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Send_ASCII_Plyon_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommunicateHandler
</UL>

<P><STRONG><a name="[108]"></a>Comm2Debug_Receive_Service</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, commdeal_cvte.o(i.Comm2Debug_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Comm2Debug_Receive_Service &rArr; GetUsartRxBufLength &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBufLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToDebugCommunicateHandler
</UL>

<P><STRONG><a name="[1d2]"></a>Comm2Debug_Send_Service</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, commdeal_cvte.o(i.Comm2Debug_Send_Service))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToDebugCommunicateHandler
</UL>

<P><STRONG><a name="[10b]"></a>Comm2EmsCan_Receive_Service</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2EmsCan_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Comm2EmsCan_Receive_Service &rArr; EMSCan_ReceivePacket &rArr; can2_ReceivePacket &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSCan_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToEmsCanCommunicateHandler
</UL>

<P><STRONG><a name="[10d]"></a>Comm2EmsCan_Send_Service</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2EmsCan_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Comm2EmsCan_Send_Service &rArr; EMSCan_SendPacket &rArr; can2_SendPacket &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSCan_SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToEmsCanCommunicateHandler
</UL>

<P><STRONG><a name="[10f]"></a>Comm2Meter_ATE_Receive_Service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Meter_ATE_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Comm2Meter_ATE_Receive_Service &rArr; MB_Slave_Receive_RTU_Frame &rArr; MB_Slave_Parsing_RTU_Frame &rArr; MB_PCS_Slave_Parsing_RTU_Frame &rArr; SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommunicateHandler
</UL>

<P><STRONG><a name="[110]"></a>Comm2Meter_ATE_Send_Service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Meter_ATE_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Comm2Meter_ATE_Send_Service &rArr; MB_Slave_Response_RTU_Frame &rArr; MB_PCS_Slave_Response_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommunicateHandler
</UL>

<P><STRONG><a name="[111]"></a>Comm2Meter_Receive_Service</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Meter_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Comm2Meter_Receive_Service &rArr; MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sMeterDataUnified
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommunicateHandler
</UL>

<P><STRONG><a name="[113]"></a>Comm2Meter_Send_Service</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Meter_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Comm2Meter_Send_Service &rArr; MB_Master_Transmit_RTU_Frame &rArr; MB_RTU_10H_Register_Index &rArr; GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Prepare
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommunicateHandler
</UL>

<P><STRONG><a name="[116]"></a>Comm2Pcs_Receive_Service</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Pcs_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Comm2Pcs_Receive_Service &rArr; MB_Master_Receive_RTU_Frame &rArr; MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommunicateHandler
</UL>

<P><STRONG><a name="[117]"></a>Comm2Pcs_Send_Service</STRONG> (Thumb, 926 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2Pcs_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Comm2Pcs_Send_Service &rArr; MB_Master_Transmit_RTU_Frame &rArr; MB_RTU_10H_Register_Index &rArr; GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Prepare
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_TEMP_COM_Retransmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_RTU_Retransmit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Meter_Retransmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommunicateHandler
</UL>

<P><STRONG><a name="[11b]"></a>Comm2WifiGprs_Receive_Service</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2WifiGprs_Receive_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Comm2WifiGprs_Receive_Service &rArr; MB_Slave_Receive_RTU_Frame &rArr; MB_Slave_Parsing_RTU_Frame &rArr; MB_PCS_Slave_Parsing_RTU_Frame &rArr; SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsCommunicateBreakCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToWifiGprsCommunicateHandler
</UL>

<P><STRONG><a name="[11c]"></a>Comm2WifiGprs_Send_Service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commdeal_cvte.o(i.Comm2WifiGprs_Send_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Comm2WifiGprs_Send_Service &rArr; MB_Slave_Response_RTU_Frame &rArr; MB_PCS_Slave_Response_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToWifiGprsCommunicateHandler
</UL>

<P><STRONG><a name="[1c9]"></a>EmsToBluetoothCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToBluetoothCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBluetoothCommunicateHandler
</UL>

<P><STRONG><a name="[1cd]"></a>EmsToBmsCanCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToBmsCanCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCanCommunicateHandler
</UL>

<P><STRONG><a name="[1cf]"></a>EmsToBmsCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToBmsCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToBmsCommunicateHandler
</UL>

<P><STRONG><a name="[1d1]"></a>EmsToDebugCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToDebugCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToDebugCommunicateHandler
</UL>

<P><STRONG><a name="[1d4]"></a>EmsToEmsCanCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToEmsCanCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToEmsCanCommunicateHandler
</UL>

<P><STRONG><a name="[1d6]"></a>EmsToMeterCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToMeterCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToMeterCommunicateHandler
</UL>

<P><STRONG><a name="[1d7]"></a>EmsToPcsCommInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, commdeal_cvte.o(i.EmsToPcsCommInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EmsToPcsCommInit &rArr; AdjustParamInit &rArr; Flash_Device_SampleAdjData_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_EMSVersion
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCodeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommunicateHandler
</UL>

<P><STRONG><a name="[1dd]"></a>EmsToWifiCommInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commdeal_cvte.o(i.EmsToWifiCommInit))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToWifiGprsCommunicateHandler
</UL>

<P><STRONG><a name="[106]"></a>MB_Master_Send_ASCII_Plyon_Frame</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, commdeal_cvte.o(i.MB_Master_Send_ASCII_Plyon_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MB_Master_Send_ASCII_Plyon_Frame &rArr; MB_Master_Transmit_ASCII_Frame &rArr; UART_DmaStartTx &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_ASCII_Prepare
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_ASCII_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Send_Service
</UL>

<P><STRONG><a name="[107]"></a>MB_Master_Send_RTU_Cvte_Frame</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, commdeal_cvte.o(i.MB_Master_Send_RTU_Cvte_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MB_Master_Send_RTU_Cvte_Frame &rArr; MB_Master_Transmit_RTU_Frame &rArr; MB_RTU_10H_Register_Index &rArr; GetPcsComDataIndex_10H &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Prepare
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Transmit_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm2Bms_Send_Service
</UL>

<P><STRONG><a name="[1d9]"></a>ModelCodeInit</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, commdeal_cvte.o(i.ModelCodeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ModelCodeInit &rArr; Flash_Device_HardwareVersion_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_HardwareVersion_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommInit
</UL>

<P><STRONG><a name="[1d8]"></a>SerialNumberInit</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, commdeal_cvte.o(i.SerialNumberInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SerialNumberInit &rArr; Flash_Device_EESerialNumber_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_EESerialNumber_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsToPcsCommInit
</UL>

<P><STRONG><a name="[296]"></a>Key_Debounce_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_service.o(i.Key_Debounce_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Debounce_Handler &rArr; Key_Device_GetKeyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Device_GetKeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handler
</UL>

<P><STRONG><a name="[29a]"></a>Key_Status_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, key_service.o(i.Key_Status_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handler
</UL>

<P><STRONG><a name="[299]"></a>Key_Time_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, key_service.o(i.Key_Time_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Time_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubDecU16Cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handler
</UL>

<P><STRONG><a name="[24e]"></a>Get_DeviceTime</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtc_service.o(i.Get_DeviceTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Get_DeviceTime &rArr; BL5372_Device_Get_Time &rArr; BL5372_Device_Read_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Get_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCRunning
</UL>

<P><STRONG><a name="[315]"></a>RTCDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc_service.o(i.RTCDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[313]"></a>RTCInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_service.o(i.RTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTCInit &rArr; BL5372_Device_Init &rArr; BL5372_Device_Write_Data &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[314]"></a>RTCRunning</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_service.o(i.RTCRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RTCRunning &rArr; Get_DeviceTime &rArr; BL5372_Device_Get_Time &rArr; BL5372_Device_Read_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceTime
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[327]"></a>Set_DeviceTime</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtc_service.o(i.Set_DeviceTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL5372_Device_Set_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTime
</UL>

<P><STRONG><a name="[ec]"></a>CheckModelCodeErrorProof</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, modbus_rtu_slave.o(i.CheckModelCodeErrorProof))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CheckModelCodeErrorProof &rArr; Flash_Device_HardwareVersion_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_HardwareVersion_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[f0]"></a>CheckSerialNumberErrorProof</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, modbus_rtu_slave.o(i.CheckSerialNumberErrorProof))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CheckSerialNumberErrorProof &rArr; Flash_Device_EESerialNumber_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_EESerialNumber_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2f3]"></a>MB_BLT_Slave_Parsing_RTU_Frame</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbus_rtu_slave.o(i.MB_BLT_Slave_Parsing_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_BLT_Slave_Parsing_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2f5]"></a>MB_BLT_Slave_Response_RTU_Frame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_rtu_slave.o(i.MB_BLT_Slave_Response_RTU_Frame))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2f2]"></a>MB_BMS_Slave_Parsing_RTU_Frame</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, modbus_rtu_slave.o(i.MB_BMS_Slave_Parsing_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MB_BMS_Slave_Parsing_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2ca]"></a>MB_BMS_Slave_Response_RTU_Frame</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, modbus_rtu_slave.o(i.MB_BMS_Slave_Response_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MB_BMS_Slave_Response_RTU_Frame &rArr; UART_DmaStartTx &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartTxBuf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2f4]"></a>MB_Meter_Slave_Parsing_RTU_Frame</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, modbus_rtu_slave.o(i.MB_Meter_Slave_Parsing_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MB_Meter_Slave_Parsing_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2dd]"></a>MB_Meter_Slave_Response_RTU_Frame</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, modbus_rtu_slave.o(i.MB_Meter_Slave_Response_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MB_Meter_Slave_Response_RTU_Frame &rArr; UART_DmaStartTx &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartTxBuf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Response_RTU_Frame
</UL>

<P><STRONG><a name="[2de]"></a>MB_PCS_Slave_Parsing_RTU_Frame</STRONG> (Thumb, 784 bytes, Stack size 176 bytes, modbus_rtu_slave.o(i.MB_PCS_Slave_Parsing_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = MB_PCS_Slave_Parsing_RTU_Frame &rArr; SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComDataToCloud_10H
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Register_Index
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_10H_Range_Check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Register_Index
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_0FH_Range_Check
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Register_Index
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Range_Check
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_SampleAdjData_Write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Time_Calibrate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSerialNumberErrorProof
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModelCodeErrorProof
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Set_ControlWay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear_SystemStatistical
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Parsing_RTU_Frame
</UL>

<P><STRONG><a name="[2f1]"></a>MB_Slave_Parsing_RTU_Frame</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, modbus_rtu_slave.o(i.MB_Slave_Parsing_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = MB_Slave_Parsing_RTU_Frame &rArr; MB_PCS_Slave_Parsing_RTU_Frame &rArr; SetComDataToCloud_10H &rArr; GetCloudInputSysParamTimeSet &rArr; Set_SysTime &rArr; Set_DeviceTime &rArr; BL5372_Device_Set_Time &rArr; BL5372_Device_Write_Time &rArr; BL5372_Device_I2C_WriteByte &rArr; BL5372_Device_I2C_WriteBit &rArr; GPIO_Driver_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_PCS_Slave_Parsing_RTU_Frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Meter_Slave_Parsing_RTU_Frame
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BMS_Slave_Parsing_RTU_Frame
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_BLT_Slave_Parsing_RTU_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Slave_Receive_RTU_Frame
</UL>

<P><STRONG><a name="[2d0]"></a>MB_Master_Parsing_RTU_Frame</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, modbus_rtu_master.o(i.MB_Master_Parsing_RTU_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = MB_Master_Parsing_RTU_Frame &rArr; MB_RTU_03H_Register_Index &rArr; GetPcsComDataIndex_03H &rArr; GetComDataToCloud_03H &rArr; GetTotalSysParamToCloudData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_RTU_Retransmit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_05H_Register_Index
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_03H_Register_Index
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_01H_Register_Index
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeData
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegsBytesNum
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Master_Receive_RTU_Frame
</UL>

<P><STRONG><a name="[23a]"></a>GetDisplayPV1Fault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplayPV1Fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayPV1Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPVFault
</UL>

<P><STRONG><a name="[23b]"></a>GetDisplayPV2Fault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_pcs_comdata.o(i.GetDisplayPV2Fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPVFault
</UL>

<P><STRONG><a name="[241]"></a>GetDisplayRealTimePV1Data</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayRealTimePV1Data))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePVData
</UL>

<P><STRONG><a name="[242]"></a>GetDisplayRealTimePV2Data</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, modbus_pcs_comdata.o(i.GetDisplayRealTimePV2Data))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimePVData
</UL>

<P><STRONG><a name="[23e]"></a>GetDisplayRealTimeCvteBMSData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus_bms_comdata.o(i.GetDisplayRealTimeCvteBMSData))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>

<P><STRONG><a name="[23d]"></a>GetDisplayRealTimePlyonBMSData</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, modbus_bms_comdata.o(i.GetDisplayRealTimePlyonBMSData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDisplayRealTimePlyonBMSData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>

<P><STRONG><a name="[331]"></a>Storage_Service_ExitFactoryParaDaultTable_Init</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, storage_management_service.o(i.Storage_Service_ExitFactoryParaDaultTable_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Storage_Service_ExitFactoryParaDaultTable_Init &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_InitVar
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_RestoreFactorySetData
</UL>

<P><STRONG><a name="[333]"></a>Storage_Service_ExitFactoryPara_CheckSumChk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, storage_management_service.o(i.Storage_Service_ExitFactoryPara_CheckSumChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Storage_Service_ExitFactoryPara_CheckSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Read
</UL>

<P><STRONG><a name="[334]"></a>Storage_Service_ExitFactoryPara_DefaultWrite</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, storage_management_service.o(i.Storage_Service_ExitFactoryPara_DefaultWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Storage_Service_ExitFactoryPara_DefaultWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_Read
</UL>

<P><STRONG><a name="[332]"></a>Storage_Service_ExitFactoryPara_Read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, storage_management_service.o(i.Storage_Service_ExitFactoryPara_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Storage_Service_ExitFactoryPara_Read &rArr; SPI_Flash_Device_GD25qxx_ReadBytes &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_DefaultWrite
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_ExitFactoryPara_CheckSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_ReadData
</UL>

<P><STRONG><a name="[32e]"></a>Storage_Service_ExitFactoryPara_Save</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, storage_management_service.o(i.Storage_Service_ExitFactoryPara_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Storage_Service_ExitFactoryPara_Save &rArr; SPI_Flash_Device_GD25qxx_WriteBytes &rArr; SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageRunning
</UL>

<P><STRONG><a name="[339]"></a>Storage_Service_HistoryParaDaultTable_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, storage_management_service.o(i.Storage_Service_HistoryParaDaultTable_Init))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_InitVar
</UL>

<P><STRONG><a name="[336]"></a>Storage_Service_HistoryPara_CheckSumChk</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, storage_management_service.o(i.Storage_Service_HistoryPara_CheckSumChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Storage_Service_HistoryPara_CheckSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Read
</UL>

<P><STRONG><a name="[337]"></a>Storage_Service_HistoryPara_DefaultWrite</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, storage_management_service.o(i.Storage_Service_HistoryPara_DefaultWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Storage_Service_HistoryPara_DefaultWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_Read
</UL>

<P><STRONG><a name="[335]"></a>Storage_Service_HistoryPara_Read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, storage_management_service.o(i.Storage_Service_HistoryPara_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Storage_Service_HistoryPara_Read &rArr; SPI_Flash_Device_GD25qxx_ReadBytes &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_DefaultWrite
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_HistoryPara_CheckSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_ReadData
</UL>

<P><STRONG><a name="[330]"></a>Storage_Service_HistoryPara_Save</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, storage_management_service.o(i.Storage_Service_HistoryPara_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Storage_Service_HistoryPara_Save &rArr; SPI_Flash_Device_GD25qxx_WriteBytes &rArr; SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageRunning
</UL>

<P><STRONG><a name="[338]"></a>Storage_Service_UserConfigParaDaultTable_Init</STRONG> (Thumb, 544 bytes, Stack size 8 bytes, storage_management_service.o(i.Storage_Service_UserConfigParaDaultTable_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Storage_Service_UserConfigParaDaultTable_Init &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_InitVar
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_RestoreFactorySetData
</UL>

<P><STRONG><a name="[33b]"></a>Storage_Service_UserConfigPara_CheckSumChk</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, storage_management_service.o(i.Storage_Service_UserConfigPara_CheckSumChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Storage_Service_UserConfigPara_CheckSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Read
</UL>

<P><STRONG><a name="[33c]"></a>Storage_Service_UserConfigPara_DefaultWrite</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, storage_management_service.o(i.Storage_Service_UserConfigPara_DefaultWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Storage_Service_UserConfigPara_DefaultWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_Read
</UL>

<P><STRONG><a name="[33a]"></a>Storage_Service_UserConfigPara_Read</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, storage_management_service.o(i.Storage_Service_UserConfigPara_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Storage_Service_UserConfigPara_Read &rArr; SPI_Flash_Device_GD25qxx_ReadBytes &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_DefaultWrite
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_Service_UserConfigPara_CheckSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPara_ReadData
</UL>

<P><STRONG><a name="[32f]"></a>Storage_Service_UserConfigPara_Save</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, storage_management_service.o(i.Storage_Service_UserConfigPara_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Storage_Service_UserConfigPara_Save &rArr; SPI_Flash_Device_GD25qxx_WriteBytes &rArr; SPI_Flash_Device_GD25qxx_ReadSector &rArr; SPI_Flash_Device_GD25qxx_ReadPage &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WriteBytes
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageRunning
</UL>

<P><STRONG><a name="[20e]"></a>AILoadControlRunning</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, energy_management_service.o(i.AILoadControlRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AILoadControlRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericControlRunning
</UL>

<P><STRONG><a name="[f2]"></a>ClearGenControlFlag</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, energy_management_service.o(i.ClearGenControlFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearGenControlFlag &rArr; Get_SysTime &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[1e1]"></a>EnergyDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, energy_management_service.o(i.EnergyDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyManagement_Handler
</UL>

<P><STRONG><a name="[1df]"></a>EnergyInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, energy_management_service.o(i.EnergyInit))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyManagement_Handler
</UL>

<P><STRONG><a name="[1e0]"></a>EnergyRunning</STRONG> (Thumb, 304 bytes, Stack size 160 bytes, energy_management_service.o(i.EnergyRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = EnergyRunning &rArr; LocalControlEnergyRunning &rArr; getEnergyRunParabyTPFVMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPcs10HEnergyStrategy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcs10HEmsParam
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCDCInformation
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPcs05HPowerOnOffControl
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBMSProtectParam
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlEnergyRunning
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericControlRunning
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGenControlFlag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_EnableDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyManagement_Handler
</UL>

<P><STRONG><a name="[20a]"></a>GenControlRunning</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, energy_management_service.o(i.GenControlRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GenControlRunning &rArr; DRY_RLY2_DeviceCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGenRunState
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRY_RLY2_DeviceCntrl
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRY_RLY1_DeviceCntrl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayGridGenState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericControlRunning
</UL>

<P><STRONG><a name="[1e7]"></a>GenericControlRunning</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, energy_management_service.o(i.GenericControlRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GenericControlRunning &rArr; GenControlRunning &rArr; DRY_RLY2_DeviceCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenControlRunning
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AILoadControlRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[1e5]"></a>LocalControlEnergyRunning</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, energy_management_service.o(i.LocalControlEnergyRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LocalControlEnergyRunning &rArr; getEnergyRunParabyTPFVMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEnergyRunParabyTPFVMode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEnergyRunParabyRegularMode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_SystemStrategy
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_Grid
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_GenPara
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[1e6]"></a>RemoteControlEnergyRunning</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, energy_management_service.o(i.RemoteControlEnergyRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RemoteControlEnergyRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnergyRunning
</UL>

<P><STRONG><a name="[2c9]"></a>getEnergyRunParabyRegularMode</STRONG> (Thumb, 894 bytes, Stack size 80 bytes, energy_management_service.o(i.getEnergyRunParabyRegularMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getEnergyRunParabyRegularMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_BmsSetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
</UL>

<P><STRONG><a name="[2c8]"></a>getEnergyRunParabyTPFVMode</STRONG> (Thumb, 922 bytes, Stack size 80 bytes, energy_management_service.o(i.getEnergyRunParabyTPFVMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getEnergyRunParabyTPFVMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_BmsSetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalControlEnergyRunning
</UL>

<P><STRONG><a name="[da]"></a>BatteryDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, battery_protect_service.o(i.BatteryDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryProtect_Handler
</UL>

<P><STRONG><a name="[d8]"></a>BatteryInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, battery_protect_service.o(i.BatteryInit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryProtect_Handler
</UL>

<P><STRONG><a name="[d9]"></a>BatteryRunning</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, battery_protect_service.o(i.BatteryRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BatteryRunning &rArr; LeadBattery_Running &rArr; LeadBattery_SOC_Integral &rArr; CalculateAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeakBatteryProtect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImplementProtectFunction
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtectParas
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryProtect_Handler
</UL>

<P><STRONG><a name="[213]"></a>GetBatteryCoreData</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, battery_protect_service.o(i.GetBatteryCoreData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryCoreData &rArr; GetDCDCInformation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCDCInformation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
</UL>

<P><STRONG><a name="[db]"></a>GetProtectParas</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, battery_protect_service.o(i.GetProtectParas))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetProtectParas &rArr; GetDisplayRealTimeBmsData &rArr; GetDisplayRealTimePlyonBMSData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_BmsSetPara
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayRealTimeBmsData
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryRunning
</UL>

<P><STRONG><a name="[dd]"></a>ImplementProtectFunction</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, battery_protect_service.o(i.ImplementProtectFunction))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryRunning
</UL>

<P><STRONG><a name="[2bb]"></a>LeadBattery_Charge</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, battery_protect_service.o(i.LeadBattery_Charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LeadBattery_Charge &rArr; LeadBattery_Floating_Charge &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Floating_Charge
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_ConstantVoltage_Charge
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_ConstantCurrent_Charge
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
</UL>

<P><STRONG><a name="[2bc]"></a>LeadBattery_ConstantCurrent_Charge</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, battery_protect_service.o(i.LeadBattery_ConstantCurrent_Charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LeadBattery_ConstantCurrent_Charge &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Charge
</UL>

<P><STRONG><a name="[2bd]"></a>LeadBattery_ConstantVoltage_Charge</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, battery_protect_service.o(i.LeadBattery_ConstantVoltage_Charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LeadBattery_ConstantVoltage_Charge &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Charge
</UL>

<P><STRONG><a name="[2bf]"></a>LeadBattery_DisCharge</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, battery_protect_service.o(i.LeadBattery_DisCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LeadBattery_DisCharge &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
</UL>

<P><STRONG><a name="[2be]"></a>LeadBattery_Floating_Charge</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, battery_protect_service.o(i.LeadBattery_Floating_Charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LeadBattery_Floating_Charge &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Charge
</UL>

<P><STRONG><a name="[dc]"></a>LeadBattery_Running</STRONG> (Thumb, 730 bytes, Stack size 16 bytes, battery_protect_service.o(i.LeadBattery_Running))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LeadBattery_Running &rArr; LeadBattery_SOC_Integral &rArr; CalculateAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_OCV
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_SOC_Integral
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_DisCharge
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Charge
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCoreData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryRunning
</UL>

<P><STRONG><a name="[2c1]"></a>LeadBattery_SOC_Integral</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, battery_protect_service.o(i.LeadBattery_SOC_Integral))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LeadBattery_SOC_Integral &rArr; CalculateAverageFilterValue &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAverageFilterValue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
</UL>

<P><STRONG><a name="[2c0]"></a>LeadBattery_SOC_OCV</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, battery_protect_service.o(i.LeadBattery_SOC_OCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LeadBattery_SOC_OCV
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadBattery_Running
</UL>

<P><STRONG><a name="[de]"></a>WeakBatteryProtect</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, battery_protect_service.o(i.WeakBatteryProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WeakBatteryProtect &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryRunning
</UL>

<P><STRONG><a name="[cf]"></a>BMSCanFaultBitTransformFaultCode</STRONG> (Thumb, 1724 bytes, Stack size 32 bytes, fault_management_service.o(i.BMSCanFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = BMSCanFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
</UL>

<P><STRONG><a name="[d6]"></a>BMSFaultBitTransformFaultCode</STRONG> (Thumb, 3190 bytes, Stack size 32 bytes, fault_management_service.o(i.BMSFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = BMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
</UL>

<P><STRONG><a name="[11e]"></a>DCDCFaultBitTransformFaultCode</STRONG> (Thumb, 1132 bytes, Stack size 32 bytes, fault_management_service.o(i.DCDCFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = DCDCFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[d1]"></a>DeteleRealFaultQueue</STRONG> (Thumb, 226 bytes, Stack size 520 bytes, fault_management_service.o(i.DeteleRealFaultQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertHistoryFaultQueue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSFaultBitTransformFaultCode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSAlarmBitTransformFaultCode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVFaultBitTransformFaultCode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvFaultBitTransformFaultCode
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenFaultBitTransformFaultCode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSFaultBitTransformFaultCode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDCFaultBitTransformFaultCode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSFaultBitTransformFaultCode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCanFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[1c3]"></a>EMSFaultBitTransformFaultCode</STRONG> (Thumb, 824 bytes, Stack size 48 bytes, fault_management_service.o(i.EMSFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536<LI>Call Chain = EMSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_EnableDetection
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Get_BmsSetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
</UL>

<P><STRONG><a name="[1e9]"></a>FaultInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fault_management_service.o(i.FaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FaultInit &rArr; Flash_Device_OperateRecord_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_OperateRecord_Read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_FaultData_Read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultManagement_Handler
</UL>

<P><STRONG><a name="[13b]"></a>FindRealFaultQueue</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, fault_management_service.o(i.FindRealFaultQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FindRealFaultQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
</UL>

<P><STRONG><a name="[20d]"></a>GenFaultBitTransformFaultCode</STRONG> (Thumb, 766 bytes, Stack size 32 bytes, fault_management_service.o(i.GenFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = GenFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[22d]"></a>GetDisplayBMSCanFaultData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fault_management_service.o(i.GetDisplayBMSCanFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetDisplayBMSCanFaultData &rArr; GetDisplayBMSCanFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSCanFault
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultData
</UL>

<P><STRONG><a name="[22f]"></a>GetDisplayBMSFaultData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fault_management_service.o(i.GetDisplayBMSFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetDisplayBMSFaultData &rArr; GetDisplayBMSFault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSFault
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultData
</UL>

<P><STRONG><a name="[1ee]"></a>GetDisplayDeviceFaultData</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fault_management_service.o(i.GetDisplayDeviceFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetDisplayDeviceFaultData &rArr; GetDisplayPCSFaultData &rArr; GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPCSFaultData
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayEMSFaultData
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSFaultData
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayBMSCanFaultData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>

<P><STRONG><a name="[231]"></a>GetDisplayEMSFaultData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fault_management_service.o(i.GetDisplayEMSFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDisplayEMSFaultData
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayEMSCommFault
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultData
</UL>

<P><STRONG><a name="[230]"></a>GetDisplayPCSFaultData</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fault_management_service.o(i.GetDisplayPCSFaultData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDisplayPCSFaultData &rArr; GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySystemFault
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplaySysAlarm
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayPVFault
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayInvFault
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayGenFault
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDCDCFault
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultData
</UL>

<P><STRONG><a name="[13c]"></a>InsertHistoryFaultQueue</STRONG> (Thumb, 230 bytes, Stack size 1928 bytes, fault_management_service.o(i.InsertHistoryFaultQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Device_FaultData_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
</UL>

<P><STRONG><a name="[d0]"></a>InsertRealFaultQueue</STRONG> (Thumb, 200 bytes, Stack size 496 bytes, fault_management_service.o(i.InsertRealFaultQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = InsertRealFaultQueue &rArr; Get_SysTime &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSFaultBitTransformFaultCode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSAlarmBitTransformFaultCode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVFaultBitTransformFaultCode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvFaultBitTransformFaultCode
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenFaultBitTransformFaultCode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSFaultBitTransformFaultCode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDCFaultBitTransformFaultCode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSFaultBitTransformFaultCode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCanFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[295]"></a>InvFaultBitTransformFaultCode</STRONG> (Thumb, 4100 bytes, Stack size 32 bytes, fault_management_service.o(i.InvFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = InvFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[1ef]"></a>PCSFaultBitTransformFaultCode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fault_management_service.o(i.PCSFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = PCSFaultBitTransformFaultCode &rArr; SYSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSFaultBitTransformFaultCode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSAlarmBitTransformFaultCode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVFaultBitTransformFaultCode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvFaultBitTransformFaultCode
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenFaultBitTransformFaultCode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDCFaultBitTransformFaultCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRunning
</UL>

<P><STRONG><a name="[30c]"></a>PVFaultBitTransformFaultCode</STRONG> (Thumb, 1280 bytes, Stack size 32 bytes, fault_management_service.o(i.PVFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = PVFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[30e]"></a>SYSAlarmBitTransformFaultCode</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, fault_management_service.o(i.SYSAlarmBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = SYSAlarmBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[30d]"></a>SYSFaultBitTransformFaultCode</STRONG> (Thumb, 2890 bytes, Stack size 32 bytes, fault_management_service.o(i.SYSFaultBitTransformFaultCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = SYSFaultBitTransformFaultCode &rArr; DeteleRealFaultQueue &rArr; InsertHistoryFaultQueue &rArr; Flash_Device_FaultData_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRealFaultQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeteleRealFaultQueue
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSFaultBitTransformFaultCode
</UL>

<P><STRONG><a name="[292]"></a>IndicationDestruction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, indication_management_service.o(i.IndicationDestruction))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationManagement_Handler
</UL>

<P><STRONG><a name="[290]"></a>IndicationInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, indication_management_service.o(i.IndicationInit))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationManagement_Handler
</UL>

<P><STRONG><a name="[28b]"></a>IndicationLightLogic</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, indication_management_service.o(i.IndicationLightLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IndicationLightLogic &rArr; LED_Device_GridCntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Device_GridCntrl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Device_GenCntrl
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Device_FaultCntrl
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationRunning
</UL>

<P><STRONG><a name="[291]"></a>IndicationRunning</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, indication_management_service.o(i.IndicationRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IndicationRunning &rArr; getIndicationStatus &rArr; GetDisplayDeviceFaultState &rArr; GetDisplayDeviceFaultData &rArr; GetDisplayPCSFaultData &rArr; GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndicationStatus
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationLightLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationManagement_Handler
</UL>

<P><STRONG><a name="[293]"></a>getIndicationStatus</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, indication_management_service.o(i.getIndicationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getIndicationStatus &rArr; GetDisplayDeviceFaultState &rArr; GetDisplayDeviceFaultData &rArr; GetDisplayPCSFaultData &rArr; GetDisplayPVFault &rArr; GetDisplayPV2Fault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayGridGenState
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDeviceFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationRunning
</UL>

<P><STRONG><a name="[1fb]"></a>GD25qxx_ReadID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, flash_device.o(i.GD25qxx_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GD25qxx_ReadID &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
</UL>

<P><STRONG><a name="[1fd]"></a>GD25qxx_ReadStatusRegister</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, flash_device.o(i.GD25qxx_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GD25qxx_ReadStatusRegister &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
</UL>

<P><STRONG><a name="[1fe]"></a>GD25qxx_ReadUniqID</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, flash_device.o(i.GD25qxx_ReadUniqID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GD25qxx_ReadUniqID &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_Init
</UL>

<P><STRONG><a name="[1fc]"></a>GD25qxx_Spi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, flash_device.o(i.GD25qxx_Spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadBytes
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_ReadPage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_EraseSector
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WriteEnable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_WaitForWriteEnd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadUniqID
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadStatusRegister
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_ReadID
</UL>

<P><STRONG><a name="[200]"></a>GD25qxx_WaitForWriteEnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, flash_device.o(i.GD25qxx_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GD25qxx_WaitForWriteEnd &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_EraseSector
</UL>

<P><STRONG><a name="[202]"></a>GD25qxx_WriteEnable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash_device.o(i.GD25qxx_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GD25qxx_WriteEnable &rArr; GD25qxx_Spi &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_WriteOutputPin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_WritePage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Device_GD25qxx_EraseSector
</UL>

<P><STRONG><a name="[363]"></a>MX_IWDG_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, iwdg_driver.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Initial
</UL>

<P><STRONG><a name="[204]"></a>GPIO_EnablePeriphClockCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio_driver.o(i.GPIO_EnablePeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EnablePeriphClockCmd &rArr; LL_IOP_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_Initial
</UL>

<P><STRONG><a name="[206]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_driver.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnablePeriphClockCmd
</UL>

<P><STRONG><a name="[a8]"></a>ADC_Driver_ADC1_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, adc_driver.o(i.ADC_Driver_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADC_Driver_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Driver_Initial
</UL>

<P><STRONG><a name="[343]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim_driver.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[348]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim_driver.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[34d]"></a>LL_TIM_CC_EnableChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim_driver.o(i.LL_TIM_CC_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_PWM_Enable
</UL>

<P><STRONG><a name="[345]"></a>LL_TIM_DisableARRPreload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim_driver.o(i.LL_TIM_DisableARRPreload))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[349]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim_driver.o(i.LL_TIM_EnableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[346]"></a>LL_TIM_OC_DisableFast</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tim_driver.o(i.LL_TIM_OC_DisableFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_DisableFast
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM15_Initial
</UL>

<P><STRONG><a name="[34b]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tim_driver.o(i.LL_TIM_OC_EnablePreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_EnablePreload
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_Initial
</UL>

<P><STRONG><a name="[342]"></a>TIM_Driver_TIM15_Initial</STRONG> (Thumb, 198 bytes, Stack size 128 bytes, tim_driver.o(i.TIM_Driver_TIM15_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TIM_Driver_TIM15_Initial &rArr; LL_TIM_OC_Init &rArr; OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisableFast
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_Driver_Initial
</UL>

<P><STRONG><a name="[34a]"></a>TIM_Driver_TIM1_Initial</STRONG> (Thumb, 328 bytes, Stack size 128 bytes, tim_driver.o(i.TIM_Driver_TIM1_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TIM_Driver_TIM1_Initial &rArr; LL_TIM_OC_Init &rArr; OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Driver_TIM1_PWM_Enable
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisableFast
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_Driver_Initial
</UL>

<P><STRONG><a name="[138]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_driver.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_Init
</UL>

<P><STRONG><a name="[126]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[124]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[125]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[123]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma_driver.o(i.LL_DMA_SetMemoryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[129]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[12b]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[127]"></a>LL_DMA_SetMode</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[122]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma_driver.o(i.LL_DMA_SetPeriphAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[128]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[121]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dma_driver.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[12a]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, dma_driver.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Tx_Inital
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort6_Rx_Inital
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Tx_Inital
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort5_Rx_Inital
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Tx_Inital
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort4_Rx_Inital
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Tx_Inital
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort3_Rx_Inital
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Tx_Inital
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort2_Rx_Inital
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Tx_Inital
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Driver_ComPort1_Rx_Inital
</UL>

<P><STRONG><a name="[356]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_driver.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[34f]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart_driver.o(i.LL_DMA_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaResetTx
</UL>

<P><STRONG><a name="[352]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart_driver.o(i.LL_DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[24d]"></a>LL_DMA_GetDataLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart_driver.o(i.LL_DMA_GetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartRxBufLength
</UL>

<P><STRONG><a name="[351]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart_driver.o(i.LL_DMA_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[350]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart_driver.o(i.LL_DMA_SetMemoryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartTx
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[355]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart_driver.o(i.LL_RCC_SetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[359]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart_driver.o(i.LL_USART_ConfigAsyncMode))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[354]"></a>LL_USART_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_driver.o(i.LL_USART_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[2ab]"></a>LL_USART_DisableDMAReq_RX</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_DisableDMAReq_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_DisableDMAReq_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[2ae]"></a>LL_USART_DisableDMAReq_TX</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_DisableDMAReq_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_DisableDMAReq_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaResetTx
</UL>

<P><STRONG><a name="[357]"></a>LL_USART_DisableFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_driver.o(i.LL_USART_DisableFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[2af]"></a>LL_USART_DisableIT_RTO</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_DisableIT_RTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_DisableIT_RTO
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[358]"></a>LL_USART_DisableOverrunDetect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_driver.o(i.LL_USART_DisableOverrunDetect))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[35a]"></a>LL_USART_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_driver.o(i.LL_USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[2b0]"></a>LL_USART_EnableDMAReq_RX</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_EnableDMAReq_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_EnableDMAReq_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[2b1]"></a>LL_USART_EnableDMAReq_TX</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_EnableDMAReq_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_EnableDMAReq_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaResetTx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[2b2]"></a>LL_USART_EnableDirectionRx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_EnableDirectionRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_EnableDirectionRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[2b5]"></a>LL_USART_EnableIT_RTO</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_EnableIT_RTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_EnableIT_RTO
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DmaStartRx
</UL>

<P><STRONG><a name="[2b9]"></a>LL_USART_SetRXFIFOThreshold</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_SetRXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_SetRXFIFOThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[2ba]"></a>LL_USART_SetTXFIFOThreshold</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_driver.o(i.LL_USART_SetTXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_SetTXFIFOThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort6_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort4_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort3_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort1_Init
</UL>

<P><STRONG><a name="[353]"></a>UART_Driver_ComPort1_Init</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, uart_driver.o(i.UART_Driver_ComPort1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Driver_ComPort1_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableOverrunDetect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableFIFO
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Disable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[35b]"></a>UART_Driver_ComPort2_Init</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, uart_driver.o(i.UART_Driver_ComPort2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Driver_ComPort2_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableOverrunDetect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableFIFO
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Disable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[35c]"></a>UART_Driver_ComPort3_Init</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, uart_driver.o(i.UART_Driver_ComPort3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Driver_ComPort3_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableFIFO
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Disable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[35d]"></a>UART_Driver_ComPort4_Init</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, uart_driver.o(i.UART_Driver_ComPort4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Driver_ComPort4_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableFIFO
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[35e]"></a>UART_Driver_ComPort5_Init</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, uart_driver.o(i.UART_Driver_ComPort5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Driver_ComPort5_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableFIFO
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[35f]"></a>UART_Driver_ComPort6_Init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, uart_driver.o(i.UART_Driver_ComPort6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Driver_ComPort6_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableFIFO
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_Init
</UL>

<P><STRONG><a name="[2ac]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_driver.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RTO
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDirectionRx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_RTO
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableDMAReq_TX
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableDMAReq_RX
</UL>

<P><STRONG><a name="[2ad]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_driver.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Driver_ComPort5_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RTO
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDirectionRx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_RTO
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableDMAReq_TX
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableDMAReq_RX
</UL>

<P><STRONG><a name="[372]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can_driver.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[371]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, can_driver.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCan1
</UL>

<P><STRONG><a name="[27d]"></a>pushCanData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, can_driver.o(i.pushCanData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pushCanData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[373]"></a>read_Can_msg</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, can_driver.o(i.read_Can_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_Can_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_ReceivePacket
</UL>

<P><STRONG><a name="[2a1]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[2a2]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[2a3]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[311]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[310]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[312]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[29e]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[29f]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[29d]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[30f]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32g0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[30b]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
</UL>

<P><STRONG><a name="[2a5]"></a>OC1Config</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2a6]"></a>OC2Config</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32g0xx_ll_tim.o(i.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2a7]"></a>OC3Config</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC3Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2a8]"></a>OC4Config</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC4Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2a9]"></a>OC5Config</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32g0xx_ll_tim.o(i.OC5Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC5Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2aa]"></a>OC6Config</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32g0xx_ll_tim.o(i.OC6Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC6Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2b7]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_ll_usart.o(i.LL_USART_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[2b8]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, stm32g0xx_ll_usart.o(i.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_USART_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[285]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[287]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[318]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, stm32g0xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[317]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, stm32g0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[a6]"></a>LL_ADC_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[b0]"></a>LL_ADC_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[b1]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_GetCommonPathInternalCh))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[a4]"></a>LL_ADC_IsDisableOngoing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_IsDisableOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[a5]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[264]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_IsInternalRegulatorEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[261]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[268]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[26a]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_REG_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[262]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[265]"></a>LL_ADC_SetSamplingTimeCommonChannels</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_SetSamplingTimeCommonChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetSamplingTimeCommonChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[260]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_adc_ex.o(i.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_SetValue
</UL>

<P><STRONG><a name="[27b]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32g0xx_hal_fdcan.o(i.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[26c]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32g0xx_hal_fdcan.o(i.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[7b]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[92]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[95]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[9a]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[9f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[84]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5a]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5b]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
